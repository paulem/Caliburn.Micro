<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.Micro</name>
    </assembly>
    <members>
        <member name="T:Caliburn.Micro.Action">
            <summary>
              A host for action related attached properties.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Action.TargetProperty">
            <summary>
              A property definition representing the target of an <see cref="T:Caliburn.Micro.ActionMessage" /> . The DataContext of the element will be set to this instance.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Action.TargetWithoutContextProperty">
            <summary>
              A property definition representing the target of an <see cref="T:Caliburn.Micro.ActionMessage" /> . The DataContext of the element is not set to this instance.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Action.SetTarget(System.Windows.DependencyObject,System.Object)">
            <summary>
              Sets the target of the <see cref="T:Caliburn.Micro.ActionMessage" /> .
            </summary>
            <param name="d"> The element to attach the target to. </param>
            <param name="target"> The target for instances of <see cref="T:Caliburn.Micro.ActionMessage" /> . </param>
        </member>
        <member name="M:Caliburn.Micro.Action.GetTarget(System.Windows.DependencyObject)">
            <summary>
              Gets the target for instances of <see cref="T:Caliburn.Micro.ActionMessage" /> .
            </summary>
            <param name="d"> The element to which the target is attached. </param>
            <returns> The target for instances of <see cref="T:Caliburn.Micro.ActionMessage" /> </returns>
        </member>
        <member name="M:Caliburn.Micro.Action.SetTargetWithoutContext(System.Windows.DependencyObject,System.Object)">
            <summary>
              Sets the target of the <see cref="T:Caliburn.Micro.ActionMessage" /> .
            </summary>
            <param name="d"> The element to attach the target to. </param>
            <param name="target"> The target for instances of <see cref="T:Caliburn.Micro.ActionMessage" /> . </param>
            <remarks>
              The DataContext will not be set.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.Action.GetTargetWithoutContext(System.Windows.DependencyObject)">
            <summary>
              Gets the target for instances of <see cref="T:Caliburn.Micro.ActionMessage" /> .
            </summary>
            <param name="d"> The element to which the target is attached. </param>
            <returns> The target for instances of <see cref="T:Caliburn.Micro.ActionMessage" /> </returns>
        </member>
        <member name="M:Caliburn.Micro.Action.HasTargetSet(System.Windows.DependencyObject)">
            <summary>
              Checks if the <see cref="T:Caliburn.Micro.ActionMessage" /> -Target was set.
            </summary>
            <param name="element"> DependencyObject to check </param>
            <returns> True if Target or TargetWithoutContext was set on <paramref name="element" /> </returns>
        </member>
        <member name="M:Caliburn.Micro.Action.Invoke(System.Object,System.String,System.Windows.DependencyObject,System.Windows.FrameworkElement,System.Object,System.Object[])">
            <summary>
              Uses the action pipeline to invoke the method.
            </summary>
            <param name="target"> The object instance to invoke the method on. </param>
            <param name="methodName"> The name of the method to invoke. </param>
            <param name="view"> The view. </param>
            <param name="source"> The source of the invocation. </param>
            <param name="eventArgs"> The event args. </param>
            <param name="parameters"> The method parameters. </param>
        </member>
        <member name="T:Caliburn.Micro.ActionExecutionContext">
            <summary>
            The context used during the execution of an Action or its guard.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActionExecutionContext.CanExecute">
            <summary>
            Determines whether the action can execute.
            </summary>
            <remarks>Returns true if the action can execute, false otherwise.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ActionExecutionContext.EventArgs">
            <summary>
            Any event arguments associated with the action's invocation.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActionExecutionContext.Method">
            <summary>
            The actual method info to be invoked.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ActionExecutionContext.Message">
            <summary>
            The message being executed.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ActionExecutionContext.Source">
            <summary>
            The source from which the message originates.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ActionExecutionContext.Target">
            <summary>
            The instance on which the action is invoked.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ActionExecutionContext.View">
            <summary>
            The view associated with the target.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ActionExecutionContext.Item(System.String)">
            <summary>
            Gets or sets additional data needed to invoke the action.
            </summary>
            <param name="key">The data key.</param>
            <returns>Custom data associated with the context.</returns>
        </member>
        <member name="M:Caliburn.Micro.ActionExecutionContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.ActionExecutionContext.Disposing">
            <summary>
            Called when the execution context is disposed
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ActionMessage">
            <summary>
            Used to send a message from the UI to a presentation model class, indicating that a particular Action should be invoked.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.EnforceGuardsDuringInvocation">
            <summary>
             Causes the action invocation to "double check" if the action should be invoked by executing the guard immediately before hand.
            </summary>
             <remarks>This is disabled by default. If multiple actions are attached to the same element, you may want to enable this so that each individaul action checks its guard regardless of how the UI state appears.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.ThrowsExceptions">
            <summary>
             Causes the action to throw if it cannot locate the target or the method at invocation time.
            </summary>
             <remarks>True by default.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.MethodNameProperty">
            <summary>
            Represents the method name of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.ParametersProperty">
            <summary>
            Represents the parameters of an action message.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.#ctor">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Micro.ActionMessage"/>.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ActionMessage.MethodName">
            <summary>
            Gets or sets the name of the method to be invoked on the presentation model class.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.Micro.ActionMessage.Parameters">
            <summary>
            Gets the parameters to pass as part of the method invocation.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="E:Caliburn.Micro.ActionMessage.Detaching">
            <summary>
            Occurs before the message detaches from the associated object.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="eventArgs">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.UpdateAvailability">
            <summary>
            Forces an update of the UI's Enabled/Disabled state based on the the preconditions associated with the method.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.InvokeAction">
            <summary>
            Invokes the action using the specified <see cref="T:Caliburn.Micro.ActionExecutionContext"/>
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.ApplyAvailabilityEffect">
            <summary>
            Applies an availability effect, such as IsEnabled, to an element.
            </summary>
            <remarks>Returns a value indicating whether or not the action is available.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.GetTargetMethod">
            <summary>
            Finds the method on the target matching the specified message.
            </summary>
            <param name="target">The target.</param>
            <param name="message">The message.</param>
            <returns>The matching method, if available.</returns>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.SetMethodBinding">
            <summary>
            Sets the target, method and view on the context. Uses a bubbling strategy by default.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.PrepareContext">
            <summary>
            Prepares the action execution context for use.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ActionMessage.TryFindGuardMethod(Caliburn.Micro.ActionExecutionContext,System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Try to find a candidate for guard function, having: 
                - a name matching any of <paramref name="possibleGuardNames"/>
                - no generic parameters
                - a bool return type
                - no parameters or a set of parameters corresponding to the action method
             </summary>
             <param name="context">The execution context</param>
             <param name="possibleGuardNames">Method names to look for.</param>
            <returns>A MethodInfo, if found; null otherwise</returns>
        </member>
        <member name="F:Caliburn.Micro.ActionMessage.BuildPossibleGuardNames">
            <summary>
            Returns the list of possible names of guard methods / properties for the given method.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.AttachedCollection`1">
            <summary>
            A collection that can exist as part of a behavior.
            </summary>
            <typeparam name="T">The type of item in the attached collection.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.AttachedCollection`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Micro.AttachedCollection`1"/>
            </summary>
        </member>
        <member name="M:Caliburn.Micro.AttachedCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            Attached the collection.
            </summary>
            <param name="dependencyObject">The dependency object to attach the collection to.</param>
        </member>
        <member name="M:Caliburn.Micro.AttachedCollection`1.Detach">
            <summary>
            Detaches the collection.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.AttachedCollection`1.OnItemAdded(`0)">
            <summary>
            Called when an item is added from the collection.
            </summary>
            <param name="item">The item that was added.</param>
        </member>
        <member name="M:Caliburn.Micro.AttachedCollection`1.OnItemRemoved(`0)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The item that was removed.</param>
        </member>
        <member name="T:Caliburn.Micro.Bind">
            <summary>
              Hosts dependency properties for binding.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Bind.ModelProperty">
            <summary>
              Allows binding on an existing view. Use this on root UserControls, Pages and Windows; not in a DataTemplate.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Bind.ModelWithoutContextProperty">
            <summary>
              Allows binding on an existing view without setting the data context. Use this from within a DataTemplate.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Bind.GetModelWithoutContext(System.Windows.DependencyObject)">
            <summary>
              Gets the model to bind to.
            </summary>
            <param name = "dependencyObject">The dependency object to bind to.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:Caliburn.Micro.Bind.SetModelWithoutContext(System.Windows.DependencyObject,System.Object)">
            <summary>
              Sets the model to bind to.
            </summary>
            <param name = "dependencyObject">The dependency object to bind to.</param>
            <param name = "value">The model.</param>
        </member>
        <member name="M:Caliburn.Micro.Bind.GetModel(System.Windows.DependencyObject)">
            <summary>
              Gets the model to bind to.
            </summary>
            <param name = "dependencyObject">The dependency object to bind to.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:Caliburn.Micro.Bind.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
              Sets the model to bind to.
            </summary>
            <param name = "dependencyObject">The dependency object to bind to.</param>
            <param name = "value">The model.</param>
        </member>
        <member name="F:Caliburn.Micro.Bind.AtDesignTimeProperty">
            <summary>
            Allows application of conventions at design-time.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Bind.GetAtDesignTime(System.Windows.DependencyObject)">
            <summary>
            Gets whether or not conventions are being applied at design-time.
            </summary>
            <param name="dependencyObject">The ui to apply conventions to.</param>
            <returns>Whether or not conventions are applied.</returns>
        </member>
        <member name="M:Caliburn.Micro.Bind.SetAtDesignTime(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether or not do bind conventions at design-time.
            </summary>
            <param name="dependencyObject">The ui to apply conventions to.</param>
            <param name="value">Whether or not to apply conventions.</param>
        </member>
        <member name="T:Caliburn.Micro.BindingScope">
            <summary>
            Provides methods for searching a given scope for named elements.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BindingScope.FindName(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},System.String)">
            <summary>
            Searches through the list of named elements looking for a case-insensitive match.
            </summary>
            <param name="elementsToSearch">The named elements to search through.</param>
            <param name="name">The name to search for.</param>
            <returns>The named element or null if not found.</returns>
        </member>
        <member name="M:Caliburn.Micro.BindingScope.AddChildResolver(System.Func{System.Type,System.Boolean},System.Func{System.Windows.DependencyObject,System.Collections.Generic.IEnumerable{System.Windows.DependencyObject}})">
            <summary>
            Adds a child resolver.
            </summary>
            <param name="filter">The type filter.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Caliburn.Micro.BindingScope.AddChildResolver``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Windows.DependencyObject}})">
            <summary>
            Adds a child resolver.
            </summary>
            <param name="filter">The type filter.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Caliburn.Micro.BindingScope.RemoveChildResolver(Caliburn.Micro.ChildResolver)">
            <summary>
            Removes a child resolver.
            </summary>
            <param name="resolver">The resolver to remove.</param>
            <returns>true, when the resolver was (found and) removed.</returns>
        </member>
        <member name="F:Caliburn.Micro.BindingScope.GetNamedElements">
            <summary>
            Gets all the <see cref="T:System.Windows.FrameworkElement"/> instances with names in the scope.
            </summary>
            <returns>Named <see cref="T:System.Windows.FrameworkElement"/> instances in the provided scope.</returns>
            <remarks>Pass in a <see cref="T:System.Windows.DependencyObject"/> and receive a list of named <see cref="T:System.Windows.FrameworkElement"/> instances in the same scope.</remarks>
        </member>
        <member name="F:Caliburn.Micro.BindingScope.GetVisualParent">
            <summary>
            Gets the parent of the given object in the Visual Tree.
            </summary>
            <returns>The parent of the given object in the Visual Tree</returns>
        </member>
        <member name="F:Caliburn.Micro.BindingScope.FindNamedDescendants">
            <summary>
            Finds a set of named <see cref="T:System.Windows.FrameworkElement"/> instances in each hop in a <see cref="T:Caliburn.Micro.BindingScope.ScopeNamingRoute"/>.
            </summary>
            <remarks>
            Searches all the elements in the <see cref="T:Caliburn.Micro.BindingScope.ScopeNamingRoute"/> parameter as well as the visual children of 
            each of these elements, the <see cref="P:System.Windows.Controls.ContentControl.Content"/>, the <c>HeaderedContentControl.Header</c>,
            the <see cref="P:System.Windows.Controls.ItemsControl.Items"/>, or the <c>HeaderedItemsControl.Header</c>, if any are found.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.BindingScope.FindScopeNamingRoute">
            <summary>
            Finds a path of dependency objects which traces through visual anscestry until a root which is <see langword="null"/>,
            a <see cref="T:System.Windows.Controls.UserControl"/>, a <c>Page</c> with a dependency object <c>Page.ContentProperty</c> value, 
            a dependency object with <see cref="F:Caliburn.Micro.View.IsScopeRootProperty"/> set to <see langword="true"/>. <see cref="T:System.Windows.Controls.ContentPresenter"/>
            and <see cref="T:System.Windows.Controls.ItemsPresenter"/> are included in the resulting <see cref="T:Caliburn.Micro.BindingScope.ScopeNamingRoute"/> in order to track which item
            in an items control we are scoped to.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.BindingScope.ScopeNamingRoute">
            <summary>
            Maintains a connection in the visual tree of dependency objects in order to record a route through it.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.BindingScope.ScopeNamingRoute.Root">
            <summary>
            Gets or sets the starting point of the route.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BindingScope.ScopeNamingRoute.AddHop(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Adds a segment to the route.
            </summary>
            <param name="from">The source dependency object.</param>
            <param name="to">The target dependency object.</param>
        </member>
        <member name="M:Caliburn.Micro.BindingScope.ScopeNamingRoute.TryGetHop(System.Windows.DependencyObject,System.Windows.DependencyObject@)">
            <summary>
            Tries to get a target dependency object given a source.
            </summary>
            <param name="hopSource">The possible beginning of a route segment (hop).</param>
            <param name="hopTarget">The target of a route segment (hop).</param>
            <returns><see langword="true"/> if <paramref name="hopSource"/> had a target recorded; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Caliburn.Micro.BootstrapperBase">
            <summary>
            Inherit from this class in order to customize the configuration of the framework.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.BootstrapperBase.Application">
            <summary>
            The application.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the bootstrapper.
            </summary>
            <param name="useApplication">Set this to false when hosting Caliburn.Micro inside and Office or WinForms application. The default is true.</param>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.Initialize">
            <summary>
            Initialize the framework.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.StartDesignTime">
            <summary>
            Called by the bootstrapper's constructor at design time to start the framework.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.StartRuntime">
            <summary>
            Called by the bootstrapper's constructor at runtime to start the framework.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.PrepareApplication">
            <summary>
            Provides an opportunity to hook into the application object.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.Configure">
            <summary>
            Override to configure the framework and setup your IoC container.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.SelectAssemblies">
            <summary>
            Override to tell the framework where to find assemblies to inspect for views, etc.
            </summary>
            <returns>A list of assemblies to inspect.</returns>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.GetInstance(System.Type,System.String)">
            <summary>
            Override this to provide an IoC specific implementation.
            </summary>
            <param name="service">The service to locate.</param>
            <param name="key">The key to locate.</param>
            <returns>The located service.</returns>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.GetAllInstances(System.Type)">
            <summary>
            Override this to provide an IoC specific implementation
            </summary>
            <param name="service">The service to locate.</param>
            <returns>The located services.</returns>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.BuildUp(System.Object)">
            <summary>
            Override this to provide an IoC specific implementation.
            </summary>
            <param name="instance">The instance to perform injection on.</param>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.OnStartup(System.Object,System.Windows.StartupEventArgs)">
            <summary>
            Override this to add custom behavior to execute after the application starts.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.OnExit(System.Object,System.EventArgs)">
            <summary>
            Override this to add custom behavior on exit.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.OnUnhandledException(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs)">
            <summary>
            Override this to add custom behavior for unhandled exceptions.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.DisplayRootViewFor(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Locates the view model, locates the associate view, binds them and shows it as the root view.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="settings">The optional window settings.</param>
        </member>
        <member name="M:Caliburn.Micro.BootstrapperBase.DisplayRootViewFor``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Locates the view model, locates the associate view, binds them and shows it as the root view.
            </summary>
            <typeparam name="TViewModel">The view model type.</typeparam>
            <param name="settings">The optional window settings.</param>
        </member>
        <member name="T:Caliburn.Micro.ChildResolver">
            <summary>
            Represents a resolver that takes a control and returns it's children
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ChildResolver.#ctor(System.Func{System.Type,System.Boolean},System.Func{System.Windows.DependencyObject,System.Collections.Generic.IEnumerable{System.Windows.DependencyObject}})">
            <summary>
            Creates the ChildResolver using the given anonymous methods.
            </summary>
            <param name="filter">The filter</param>
            <param name="resolver">The resolver</param>
        </member>
        <member name="M:Caliburn.Micro.ChildResolver.CanResolve(System.Type)">
            <summary>
            Can this resolve appy to the given type.
            </summary>
            <param name="type">The visual tree type.</param>
            <returns>Returns true if this resolver applies.</returns>
        </member>
        <member name="M:Caliburn.Micro.ChildResolver.Resolve(System.Windows.DependencyObject)">
            <summary>
            The element from the visual tree for the children to resolve.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.ChildResolver`1">
            <summary>
            Generic strongly typed child resolver
            </summary>
            <typeparam name="T">The type to filter on</typeparam>
        </member>
        <member name="M:Caliburn.Micro.ChildResolver`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{System.Windows.DependencyObject}})">
            <summary>
            Creates a 
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="T:Caliburn.Micro.ConventionManager">
            <summary>
            Used to configure the conventions used by the framework to apply bindings and create actions.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.BooleanToVisibilityConverter">
            <summary>
            Converters <see cref="T:System.Boolean"/> to/from <see cref="T:System.Windows.Visibility"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.IncludeStaticProperties">
            <summary>
            Indicates whether or not static properties should be included during convention name matching.
            </summary>
            <remarks>False by default.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.OverwriteContent">
            <summary>
            Indicates whether or not the Content of ContentControls should be overwritten by conventional bindings.
            </summary>
            <remarks>False by default.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.DefaultItemTemplate">
            <summary>
            The default DataTemplate used for ItemsControls when required.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.DefaultHeaderTemplate">
            <summary>
            The default DataTemplate used for Headered controls when required.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.Singularize">
            <summary>
            Changes the provided word from a plural form to a singular form.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.DerivePotentialSelectionNames">
            <summary>
            Derives the SelectedItem property name.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.SetBinding">
            <summary>
            Creates a binding and sets it on the element, applying the appropriate conventions.
            </summary>
            <param name="viewModelType"></param>
            <param name="path"></param>
            <param name="property"></param>
            <param name="element"></param>
            <param name="convention"></param>
            <param name="bindableProperty"></param>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ApplyBindingMode">
            <summary>
            Applies the appropriate binding mode to the binding.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ApplyValidation">
            <summary>
            Determines whether or not and what type of validation to enable on the binding.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ApplyValueConverter">
            <summary>
            Determines whether a value converter is is needed and applies one to the binding.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ApplyStringFormat">
            <summary>
            Determines whether a custom string format is needed and applies it to the binding.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ApplyUpdateSourceTrigger">
            <summary>
            Determines whether a custom update source trigger should be applied to the binding.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.AddElementConvention``1(System.Windows.DependencyProperty,System.String,System.String)">
            <summary>
            Adds an element convention.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="bindableProperty">The default property for binding conventions.</param>
            <param name="parameterProperty">The default property for action parameters.</param>
            <param name="eventName">The default event to trigger actions.</param>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.AddElementConvention(Caliburn.Micro.ElementConvention)">
            <summary>
            Adds an element convention.
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.GetElementConvention(System.Type)">
            <summary>
            Gets an element convention for the provided element type.
            </summary>
            <param name="elementType">The type of element to locate the convention for.</param>
            <returns>The convention if found, null otherwise.</returns>
            <remarks>Searches the class hierarchy for conventions.</remarks>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.HasBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Determines whether a particular dependency property already has a binding on the provided element.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.SetBindingWithoutBindingOverwrite(System.Type,System.String,System.Reflection.PropertyInfo,System.Windows.FrameworkElement,Caliburn.Micro.ElementConvention,System.Windows.DependencyProperty)">
            <summary>
            Creates a binding and sets it on the element, guarding against pre-existing bindings.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.SetBindingWithoutBindingOrValueOverwrite(System.Type,System.String,System.Reflection.PropertyInfo,System.Windows.FrameworkElement,Caliburn.Micro.ElementConvention,System.Windows.DependencyProperty)">
            <summary>
            Creates a binding and set it on the element, guarding against pre-existing bindings and pre-existing values.
            </summary>
            <param name="viewModelType"></param>
            <param name="path"></param>
            <param name="property"></param>
            <param name="element"></param>
            <param name="convention"></param>
            <param name="bindableProperty"> </param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.ApplyItemTemplate(System.Windows.Controls.ItemsControl,System.Reflection.PropertyInfo)">
            <summary>
            Attempts to apply the default item template to the items control.
            </summary>
            <param name="itemsControl">The items control.</param>
            <param name="property">The collection property.</param>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ConfigureSelectedItem">
            <summary>
            Configures the selected item convention.
            </summary>
            <param name="selector">The element that has a SelectedItem property.</param>
            <param name="selectedItemProperty">The SelectedItem property.</param>
            <param name="viewModelType">The view model type.</param>
            <param name="path">The property path.</param>
        </member>
        <member name="F:Caliburn.Micro.ConventionManager.ConfigureSelectedItemBinding">
            <summary>
            Configures the SelectedItem binding for matched selection path.
            </summary>
            <param name="selector">The element that has a SelectedItem property.</param>
            <param name="selectedItemProperty">The SelectedItem property.</param>
            <param name="viewModelType">The view model type.</param>
            <param name="selectionPath">The property path.</param>
            <param name="binding">The binding to configure.</param>
            <returns>A bool indicating whether to apply binding</returns>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.ApplyHeaderTemplate(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Windows.DependencyProperty,System.Type)">
            <summary>
            Applies a header template based on <see cref="T:Caliburn.Micro.IHaveDisplayName"/>
            </summary>
            <param name="element"></param>
            <param name="headerTemplateProperty"></param>
            <param name="headerTemplateSelectorProperty"> </param>
            <param name="viewModelType"></param>
        </member>
        <member name="M:Caliburn.Micro.ConventionManager.GetPropertyCaseInsensitive(System.Type,System.String)">
            <summary>
            Gets a property by name, ignoring case and searching all interfaces.
            </summary>
            <param name="type">The type to inspect.</param>
            <param name="propertyName">The property to search for.</param>
            <returns>The property or null if not found.</returns>
        </member>
        <member name="T:Caliburn.Micro.ActivationEventArgs">
            <summary>
            EventArgs sent during activation.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActivationEventArgs.WasInitialized">
            <summary>
            Indicates whether the sender was initialized in addition to being activated.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ActivationProcessedEventArgs">
            <summary>
            Contains details about the success or failure of an item's activation through an <see cref="T:Caliburn.Micro.IConductor"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActivationProcessedEventArgs.Item">
            <summary>
            The item whose activation was processed.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ActivationProcessedEventArgs.Success">
            <summary>
            Gets or sets a value indicating whether the activation was a success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Micro.BindableCollection`1">
            <summary>
            A base collection class that supports automatic UI thread marshalling.
            </summary>
            <typeparam name="T">The type of elements contained in the collection.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:Caliburn.Micro.BindableCollection`1" /> class.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref = "T:Caliburn.Micro.BindableCollection`1" /> class.
            </summary>
            <param name = "collection">The collection from which the elements are copied.</param>
        </member>
        <member name="P:Caliburn.Micro.BindableCollection`1.IsNotifying">
            <summary>
            Enables/Disables property change notification.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name = "propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.Refresh">
            <summary>
            Raises a change notification indicating that all bindings should be refreshed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
              Inserts the item to the specified position.
            </summary>
            <param name = "index">The index to insert at.</param>
            <param name = "item">The item to be inserted.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.InsertItemBase(System.Int32,`0)">
            <summary>
            Exposes the base implementation of the <see cref = "M:Caliburn.Micro.BindableCollection`1.InsertItem(System.Int32,`0)" /> function.
            </summary>
            <param name = "index">The index.</param>
            <param name = "item">The item.</param>
            <remarks>
              Used to avoid compiler warning regarding unverifiable code.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets the item at the specified position.
            </summary>
            <param name = "index">The index to set the item at.</param>
            <param name = "item">The item to set.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.SetItemBase(System.Int32,`0)">
            <summary>
            Exposes the base implementation of the <see cref = "M:Caliburn.Micro.BindableCollection`1.SetItem(System.Int32,`0)" /> function.
            </summary>
            <param name = "index">The index.</param>
            <param name = "item">The item.</param>
            <remarks>
              Used to avoid compiler warning regarding unverifiable code.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified position.
            </summary>
            <param name = "index">The position used to identify the item to remove.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.RemoveItemBase(System.Int32)">
            <summary>
            Exposes the base implementation of the <see cref = "M:Caliburn.Micro.BindableCollection`1.RemoveItem(System.Int32)" /> function.
            </summary>
            <param name = "index">The index.</param>
            <remarks>
              Used to avoid compiler warning regarding unverifiable code.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.ClearItems">
            <summary>
            Clears the items contained by the collection.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.ClearItemsBase">
            <summary>
            Exposes the base implementation of the <see cref = "M:Caliburn.Micro.BindableCollection`1.ClearItems" /> function.
            </summary>
            <remarks>
              Used to avoid compiler warning regarding unverifiable code.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref = "E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event with the provided arguments.
            </summary>
            <param name = "e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the provided arguments.
            </summary>
            <param name = "e">The event data to report in the event.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range.
            </summary>
            <param name = "items">The items.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the range.
            </summary>
            <param name = "items">The items.</param>
        </member>
        <member name="M:Caliburn.Micro.BindableCollection`1.OnUIThread(System.Action)">
            <summary>
            Executes the given action on the UI thread
            </summary>
            <remarks>An extension point for subclasses to customise how property change notifications are handled.</remarks>
            <param name="action"></param>
        </member>
        <member name="T:Caliburn.Micro.Conductor`1">
            <summary>
            An implementation of <see cref="T:Caliburn.Micro.IConductor"/> that holds on to and activates only one item at a time.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="T:Caliburn.Micro.Conductor`1.Collection">
            <summary>
            An implementation of <see cref="T:Caliburn.Micro.IConductor"/> that holds on many items.
            </summary>
            <summary>
            An implementation of <see cref="T:Caliburn.Micro.IConductor"/> that holds on many items.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Conductor`1.Collection.AllActive">
            <summary>
            An implementation of <see cref="T:Caliburn.Micro.IConductor"/> that holds on to many items which are all activated.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Conductor`1.Collection.AllActive"/> class.
            </summary>
            <param name="openPublicItems">if set to <c>true</c> opens public items that are properties of this class.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Conductor`1.Collection.AllActive"/> class.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Conductor`1.Collection.AllActive.Items">
            <summary>
            Gets the items that are currently being conducted.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.OnInitialize">
            <summary>
            Called when initializing.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.AllActive.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem">The item that is about to be activated.</param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="T:Caliburn.Micro.Conductor`1.Collection.OneActive">
            <summary>
            An implementation of <see cref="T:Caliburn.Micro.IConductor"/> that holds on many items but only activates one at a time.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.Conductor`1.Collection.OneActive"/> class.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Conductor`1.Collection.OneActive.Items">
            <summary>
            Gets the items that are currently being conducted.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.DetermineNextItemToActivate(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Determines the next item to activate based on the last active index.
            </summary>
            <param name="list">The list of possible active items.</param>
            <param name="lastIndex">The index of the last active item.</param>
            <returns>The next item to activate.</returns>
            <remarks>Called after an active item is closed.</remarks>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.Micro.Conductor`1.Collection.OneActive.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem">The item that is about to be activated.</param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="T:Caliburn.Micro.ConductorBase`1">
            <summary>
            A base class for various implementations of <see cref="T:Caliburn.Micro.IConductor"/>.
            </summary>
            <typeparam name="T">The type that is being conducted.</typeparam>
        </member>
        <member name="P:Caliburn.Micro.ConductorBase`1.CloseStrategy">
            <summary>
            Gets or sets the close strategy.
            </summary>
            <value>The close strategy.</value>
        </member>
        <member name="E:Caliburn.Micro.ConductorBase`1.ActivationProcessed">
            <summary>
            Occurs when an activation request is processed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ConductorBase`1.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="M:Caliburn.Micro.ConductorBase`1.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.Micro.ConductorBase`1.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:Caliburn.Micro.ConductorBase`1.OnActivationProcessed(`0,System.Boolean)">
            <summary>
            Called by a subclass when an activation needs processing.
            </summary>
            <param name="item">The item on which activation was attempted.</param>
            <param name="success">if set to <c>true</c> activation was successful.</param>
        </member>
        <member name="M:Caliburn.Micro.ConductorBase`1.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem">The item that is about to be activated.</param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="T:Caliburn.Micro.ConductorBaseWithActiveItem`1">
            <summary>
            A base class for various implementations of <see cref="T:Caliburn.Micro.IConductor"/> that maintain an active item.
            </summary>
            <typeparam name="T">The type that is being conducted.</typeparam>
        </member>
        <member name="P:Caliburn.Micro.ConductorBaseWithActiveItem`1.ActiveItem">
            <summary>
            The currently active item.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ConductorBaseWithActiveItem`1.Caliburn#Micro#IHaveActiveItem#ActiveItem">
            <summary>
            The currently active item.
            </summary>
            <value></value>
        </member>
        <member name="M:Caliburn.Micro.ConductorBaseWithActiveItem`1.ChangeActiveItem(`0,System.Boolean)">
            <summary>
            Changes the active item.
            </summary>
            <param name="newItem">The new item to activate.</param>
            <param name="closePrevious">Indicates whether or not to close the previous active item.</param>
        </member>
        <member name="T:Caliburn.Micro.ContainerExtensions">
            <summary>
            Extension methods for the <see cref="T:Caliburn.Micro.SimpleContainer"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.Singleton``1(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
            Registers a singleton.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.Singleton``2(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
            Registers a singleton.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.PerRequest``1(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
            Registers an service to be created on each request.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.PerRequest``2(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
            Registers an service to be created on each request.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.Instance``1(Caliburn.Micro.SimpleContainer,``0)">
            <summary>
            Registers an instance with the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container.</param>
            <param name="instance">The instance.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.Handler``1(Caliburn.Micro.SimpleContainer,System.Func{Caliburn.Micro.SimpleContainer,System.Object})">
            <summary>
            Registers a custom service handler with the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container.</param>
            <param name="handler">The handler.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.AllTypesOf``1(Caliburn.Micro.SimpleContainer,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            Registers all specified types in an assembly as singleton in the container.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container.</param>
            <param name="assembly">The assembly.</param>
            <param name="filter">The type filter.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.GetInstance``1(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
            Requests an instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.GetAllInstances``1(Caliburn.Micro.SimpleContainer)">
            <summary>
            Gets all instances of a particular type.
            </summary>
            <typeparam name="TService">The type to resolve.</typeparam>
            <param name="container">The container.</param>
            <returns>The resolved instances.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.HasHandler``1(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
            Determines if a handler for the service/key has previously been registered.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
            <returns>True if a handler is registere; false otherwise.</returns>
        </member>
        <member name="M:Caliburn.Micro.ContainerExtensions.UnregisterHandler``1(Caliburn.Micro.SimpleContainer,System.String)">
            <summary>
              Unregisters any handlers for the service/key that have previously been registered.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="container">The container.</param>
            <param name = "key">The key.</param>
        </member>
        <member name="T:Caliburn.Micro.ContinueResultDecorator">
            <summary>
            A result decorator which executes a coroutine when the wrapped result was cancelled.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ContinueResultDecorator.#ctor(Caliburn.Micro.IResult,System.Func{Caliburn.Micro.IResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.ContinueResultDecorator"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="coroutine">The coroutine to execute when <paramref name="result"/> was canceled.</param>
        </member>
        <member name="M:Caliburn.Micro.ContinueResultDecorator.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="context">The context.</param>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.Coroutine">
            <summary>
            Manages coroutine execution.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Coroutine.CreateParentEnumerator">
            <summary>
            Creates the parent enumerator.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Coroutine.BeginExecute(System.Collections.Generic.IEnumerator{Caliburn.Micro.IResult},Caliburn.Micro.CoroutineExecutionContext,System.EventHandler{Caliburn.Micro.ResultCompletionEventArgs})">
            <summary>
            Executes a coroutine.
            </summary>
            <param name="coroutine">The coroutine to execute.</param>
            <param name="context">The context to execute the coroutine within.</param>
            /// <param name="callback">The completion callback for the coroutine.</param>
        </member>
        <member name="M:Caliburn.Micro.Coroutine.ExecuteAsync(System.Collections.Generic.IEnumerator{Caliburn.Micro.IResult},Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes a coroutine asynchronous.
            </summary>
            <param name="coroutine">The coroutine to execute.</param>
            <param name="context">The context to execute the coroutine within.</param>
            <returns>A task that represents the asynchronous coroutine.</returns>
        </member>
        <member name="E:Caliburn.Micro.Coroutine.Completed">
            <summary>
            Called upon completion of a coroutine.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.CoroutineExecutionContext">
            <summary>
            The context used during the execution of a Coroutine.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.CoroutineExecutionContext.Source">
            <summary>
            The source from which the message originates.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.CoroutineExecutionContext.View">
            <summary>
            The view associated with the target.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.CoroutineExecutionContext.Target">
            <summary>
            The instance on which the action is invoked.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.DeactivationEventArgs">
            <summary>
            EventArgs sent during deactivation.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.DeactivationEventArgs.WasClosed">
            <summary>
            Indicates whether the sender was closed in addition to being deactivated.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.DebugLog">
            <summary>
              A simple logger thats logs everything to the debugger.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.DebugLog.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.DebugLog"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.Micro.DebugLog.Info(System.String,System.Object[])">
            <summary>
            Logs the message as info.
            </summary>
            <param name="format">A formatted message.</param>
            <param name="args">Parameters to be injected into the formatted message.</param>
        </member>
        <member name="M:Caliburn.Micro.DebugLog.Warn(System.String,System.Object[])">
            <summary>
            Logs the message as a warning.
            </summary>
            <param name="format">A formatted message.</param>
            <param name="args">Parameters to be injected into the formatted message.</param>
        </member>
        <member name="M:Caliburn.Micro.DebugLog.Error(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Caliburn.Micro.DefaultCloseStrategy`1">
            <summary>
            Used to gather the results from multiple child elements which may or may not prevent closing.
            </summary>
            <typeparam name="T">The type of child element.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.DefaultCloseStrategy`1.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="closeConductedItemsWhenConductorCannotClose">Indicates that even if all conducted items are not closable, those that are should be closed. The default is FALSE.</param>
        </member>
        <member name="M:Caliburn.Micro.DefaultCloseStrategy`1.Execute(System.Collections.Generic.IEnumerable{`0},System.Action{System.Boolean,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Executes the strategy.
            </summary>
            <param name="toClose">Items that are requesting close.</param>
            <param name="callback">The action to call when all enumeration is complete and the close results are aggregated.
            The bool indicates whether close can occur. The enumerable indicates which children should close if the parent cannot.</param>
        </member>
        <member name="T:Caliburn.Micro.DefaultPlatformProvider">
            <summary>
            Default implementation for <see cref="T:Caliburn.Micro.IPlatformProvider"/> that does no platform enlightenment.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.DefaultPlatformProvider.InDesignMode">
            <summary>
            Indicates whether or not the framework is in design-time mode.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.BeginOnUIThread(System.Action)">
            <summary>
            Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.OnUIThreadAsync(System.Action)">
            <summary>
            Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.OnUIThread(System.Action)">
            <summary>
            Executes the action on the UI thread.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.GetFirstNonGeneratedView(System.Object)">
            <summary>
            Used to retrieve the root, non-framework-created view.
            </summary>
            <param name="view">The view to search.</param>
            <returns>
            The root element that was not created by the framework.
            </returns>
            <remarks>
            In certain instances the services create UI elements.
            For example, if you ask the window manager to show a UserControl as a dialog, it creates a window to host the UserControl in.
            The WindowManager marks that element as a framework-created element so that it can determine what it created vs. what was intended by the developer.
            Calling GetFirstNonGeneratedView allows the framework to discover what the original element was.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.ExecuteOnFirstLoad(System.Object,System.Action{System.Object})">
            <summary>
            Executes the handler the fist time the view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="handler">The handler.</param>
            <returns>true if the handler was executed immediately; false otherwise</returns>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.ExecuteOnLayoutUpdated(System.Object,System.Action{System.Object})">
            <summary>
            Executes the handler the next time the view's LayoutUpdated event fires.
            </summary>
            <param name="view">The view.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.DefaultPlatformProvider.GetViewCloseAction(System.Object,System.Collections.Generic.ICollection{System.Object},System.Nullable{System.Boolean})">
            <summary>
            Get the close action for the specified view model.
            </summary>
            <param name="viewModel">The view model to close.</param>
            <param name="views">The associated views.</param>
            <param name="dialogResult">The dialog result.</param>
            <returns>
            An <see cref="T:Caliburn.Micro.Action" /> to close the view model.
            </returns>
        </member>
        <member name="T:Caliburn.Micro.DelegateResult">
            <summary>
            A result that executes an <see cref="T:System.Action"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.DelegateResult.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.DelegateResult"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Micro.DelegateResult.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.Micro.DelegateResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.DelegateResult`1">
            <summary>
            A result that executes a <see cref="T:System.Func`1"/>
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.DelegateResult`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.DelegateResult`1"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Micro.DelegateResult`1.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Caliburn.Micro.DelegateResult`1.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.DelegateResult`1.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Caliburn.Micro.EnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the action to each element in the list.
            </summary>
            <typeparam name="T">The enumerable item's type.</typeparam>
            <param name="enumerable">The elements to enumerate.</param>
            <param name="action">The action to apply to each item in the list.</param>
        </member>
        <member name="T:Caliburn.Micro.EventAggregator">
            <summary>
            Enables loosely-coupled publication of and subscription to events.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.EventAggregator.HandlerResultProcessing">
            <summary>
            Processing of handler results on publication thread.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.EventAggregator.HandlerExistsFor(System.Type)">
            <summary>
            Searches the subscribed handlers to check if we have a handler for
            the message type supplied.
            </summary>
            <param name="messageType">The message type to check with</param>
            <returns>True if any handler is found, false if not.</returns>
        </member>
        <member name="M:Caliburn.Micro.EventAggregator.Subscribe(System.Object)">
            <summary>
            Subscribes an instance to all events declared through implementations of <see cref = "T:Caliburn.Micro.IHandle`1" />
            </summary>
            <param name = "subscriber">The instance to subscribe for event publication.</param>
        </member>
        <member name="M:Caliburn.Micro.EventAggregator.Unsubscribe(System.Object)">
            <summary>
            Unsubscribes the instance from all events.
            </summary>
            <param name = "subscriber">The instance to unsubscribe.</param>
        </member>
        <member name="M:Caliburn.Micro.EventAggregator.Publish(System.Object,System.Action{System.Action})">
            <summary>
            Publishes a message.
            </summary>
            <param name = "message">The message instance.</param>
            <param name = "marshal">Allows the publisher to provide a custom thread marshaller for the message publication.</param>
        </member>
        <member name="T:Caliburn.Micro.EventAggregatorExtensions">
            <summary>
            Extensions for <see cref="T:Caliburn.Micro.IEventAggregator"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.EventAggregatorExtensions.PublishOnCurrentThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
            Publishes a message on the current thread (synchrone).
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.EventAggregatorExtensions.PublishOnBackgroundThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
            Publishes a message on a background thread (async).
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.EventAggregatorExtensions.PublishOnUIThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
            Publishes a message on the UI thread.
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.EventAggregatorExtensions.BeginPublishOnUIThread(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
            Publishes a message on the UI thread asynchrone.
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name = "message">The message instance.</param>
        </member>
        <member name="M:Caliburn.Micro.EventAggregatorExtensions.PublishOnUIThreadAsync(Caliburn.Micro.IEventAggregator,System.Object)">
            <summary>
            Publishes a message on the UI thread asynchrone.
            </summary>
            <param name="eventAggregator">The event aggregator.</param>
            <param name="message">The message instance.</param>
        </member>
        <member name="T:Caliburn.Micro.Execute">
            <summary>
              Enables easy marshalling of code to the UI thread.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Execute.InDesignMode">
            <summary>
              Indicates whether or not the framework is in design-time mode.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Execute.BeginOnUIThread(System.Action)">
            <summary>
              Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.Execute.OnUIThreadAsync(System.Action)">
            <summary>
              Executes the action on the UI thread asynchronously.
            </summary>
            <param name = "action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.Execute.OnUIThread(System.Action)">
            <summary>
              Executes the action on the UI thread.
            </summary>
            <param name = "action">The action to execute.</param>
        </member>
        <member name="T:Caliburn.Micro.ExpressionExtensions">
            <summary>
            Extension for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Converts an expression into a <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>The member info.</returns>
        </member>
        <member name="T:Caliburn.Micro.IActivate">
            <summary>
            Denotes an instance which requires activation.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.IActivate.IsActive">
            <summary>
             Indicates whether or not this instance is active.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IActivate.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.IActivate.Activated">
            <summary>
            Raised after activation occurs.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IChild">
            <summary>
            Denotes a node within a parent/child hierarchy.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.IChild.Parent">
            <summary>
            Gets or Sets the Parent
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IChild`1">
            <summary>
            Denotes a node within a parent/child hierarchy.
            </summary>
            <typeparam name="TParent">The type of parent.</typeparam>
        </member>
        <member name="P:Caliburn.Micro.IChild`1.Parent">
            <summary>
            Gets or Sets the Parent
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IClose">
            <summary>
            Denotes an object that can be closed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IClose.TryClose(System.Nullable{System.Boolean})">
            <summary>
            Tries to close this instance.
            Also provides an opportunity to pass a dialog result to it's corresponding view.
            </summary>
            <param name="dialogResult">The dialog result.</param>
        </member>
        <member name="T:Caliburn.Micro.ICloseStrategy`1">
            <summary>
            Used to gather the results from multiple child elements which may or may not prevent closing.
            </summary>
            <typeparam name="T">The type of child element.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.ICloseStrategy`1.Execute(System.Collections.Generic.IEnumerable{`0},System.Action{System.Boolean,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Executes the strategy.
            </summary>
            <param name="toClose">Items that are requesting close.</param>
            <param name="callback">The action to call when all enumeration is complete and the close results are aggregated.
            The bool indicates whether close can occur. The enumerable indicates which children should close if the parent cannot.</param>
        </member>
        <member name="T:Caliburn.Micro.IConductor">
            <summary>
            Denotes an instance which conducts other objects by managing an ActiveItem and maintaining a strict lifecycle.
            </summary>
            <remarks>Conducted instances can optin to the lifecycle by impelenting any of the follosing <see cref="T:Caliburn.Micro.IActivate"/>, <see cref="T:Caliburn.Micro.IDeactivate"/>, <see cref="T:Caliburn.Micro.IGuardClose"/>.</remarks>
        </member>
        <member name="M:Caliburn.Micro.IConductor.ActivateItem(System.Object)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:Caliburn.Micro.IConductor.DeactivateItem(System.Object,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="E:Caliburn.Micro.IConductor.ActivationProcessed">
            <summary>
            Occurs when an activation request is processed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IConductActiveItem">
            <summary>
            An <see cref="T:Caliburn.Micro.IConductor"/> that also implements <see cref="T:Caliburn.Micro.IHaveActiveItem"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IDeactivate">
            <summary>
            Denotes an instance which requires deactivation.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.IDeactivate.AttemptingDeactivation">
            <summary>
            Raised before deactivation.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IDeactivate.Deactivate(System.Boolean)">
            <summary>
            Deactivates this instance.
            </summary>
            <param name="close">Indicates whether or not this instance is being closed.</param>
        </member>
        <member name="E:Caliburn.Micro.IDeactivate.Deactivated">
            <summary>
            Raised after deactivation.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IEventAggregator">
            <summary>
              Enables loosely-coupled publication of and subscription to events.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IEventAggregator.HandlerExistsFor(System.Type)">
            <summary>
            Searches the subscribed handlers to check if we have a handler for
            the message type supplied.
            </summary>
            <param name="messageType">The message type to check with</param>
            <returns>True if any handler is found, false if not.</returns>
        </member>
        <member name="M:Caliburn.Micro.IEventAggregator.Subscribe(System.Object)">
            <summary>
              Subscribes an instance to all events declared through implementations of <see cref = "T:Caliburn.Micro.IHandle`1" />
            </summary>
            <param name = "subscriber">The instance to subscribe for event publication.</param>
        </member>
        <member name="M:Caliburn.Micro.IEventAggregator.Unsubscribe(System.Object)">
            <summary>
              Unsubscribes the instance from all events.
            </summary>
            <param name = "subscriber">The instance to unsubscribe.</param>
        </member>
        <member name="M:Caliburn.Micro.IEventAggregator.Publish(System.Object,System.Action{System.Action})">
            <summary>
              Publishes a message.
            </summary>
            <param name = "message">The message instance.</param>
            <param name = "marshal">Allows the publisher to provide a custom thread marshaller for the message publication.</param>
        </member>
        <member name="T:Caliburn.Micro.IGuardClose">
            <summary>
            Denotes an instance which may prevent closing.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IGuardClose.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementer calls this action with the result of the close check.</param>
        </member>
        <member name="T:Caliburn.Micro.IHandle">
            <summary>
              A marker interface for classes that subscribe to messages.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IHandle`1">
            <summary>
              Denotes a class which can handle a particular type of message.
            </summary>
            <typeparam name = "TMessage">The type of message to handle.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.IHandle`1.Handle(`0)">
            <summary>
              Handles the message.
            </summary>
            <param name = "message">The message.</param>
        </member>
        <member name="T:Caliburn.Micro.IHandleWithCoroutine`1">
            <summary>
             Denotes a class which can handle a particular type of message and uses a Coroutine to do so.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IHandleWithCoroutine`1.Handle(`0)">
            <summary>
             Handle the message with a Coroutine.
            </summary>
            <param name="message">The message.</param>
            <returns>The coroutine to execute.</returns>
        </member>
        <member name="T:Caliburn.Micro.IHandleWithTask`1">
            <summary>
             Denotes a class which can handle a particular type of message and uses a Task to do so.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IHandleWithTask`1.Handle(`0)">
            <summary>
             Handle the message with a Task.
            </summary>
            <param name="message">The message.</param>
            <returns>The Task that represents the operation.</returns>
        </member>
        <member name="T:Caliburn.Micro.IHaveActiveItem">
            <summary>
            Denotes an instance which maintains an active item.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.IHaveActiveItem.ActiveItem">
            <summary>
            The currently active item.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IHaveDisplayName">
            <summary>
            Denotes an instance which has a display name.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.IHaveDisplayName.DisplayName">
            <summary>
            Gets or Sets the Display Name
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ILog">
            <summary>
            A logger.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ILog.Info(System.String,System.Object[])">
            <summary>
            Logs the message as info.
            </summary>
            <param name="format">A formatted message.</param>
            <param name="args">Parameters to be injected into the formatted message.</param>
        </member>
        <member name="M:Caliburn.Micro.ILog.Warn(System.String,System.Object[])">
            <summary>
            Logs the message as a warning.
            </summary>
            <param name="format">A formatted message.</param>
            <param name="args">Parameters to be injected into the formatted message.</param>
        </member>
        <member name="M:Caliburn.Micro.ILog.Error(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Caliburn.Micro.INotifyPropertyChangedEx">
            <summary>
            Extends <see cref = "T:System.ComponentModel.INotifyPropertyChanged" /> such that the change event can be raised by external parties.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.INotifyPropertyChangedEx.IsNotifying">
            <summary>
            Enables/Disables property change notification.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.INotifyPropertyChangedEx.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name = "propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.Micro.INotifyPropertyChangedEx.Refresh">
            <summary>
            Raises a change notification indicating that all bindings should be refreshed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IObservableCollection`1">
            <summary>
            Represents a collection that is observable.
            </summary>
            <typeparam name = "T">The type of elements contained in the collection.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.IObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Adds the range.
            </summary>
            <param name = "items">The items.</param>
        </member>
        <member name="M:Caliburn.Micro.IObservableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
              Removes the range.
            </summary>
            <param name = "items">The items.</param>
        </member>
        <member name="T:Caliburn.Micro.IoC">
            <summary>
            Used by the framework to pull instances from an IoC container and to inject dependencies into certain existing classes.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.IoC.GetInstance">
            <summary>
            Gets an instance by type and key.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.IoC.GetAllInstances">
            <summary>
            Gets all instances of a particular type.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.IoC.BuildUp">
            <summary>
            Passes an existing instance to the IoC container to enable dependencies to be injected.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IoC.Get``1(System.String)">
            <summary>
            Gets an instance from the container.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <param name="key">The key to look up.</param>
            <returns>The resolved instance.</returns>
        </member>
        <member name="M:Caliburn.Micro.IoC.GetAll``1">
            <summary>
            Gets all instances of a particular type.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>The resolved instances.</returns>
        </member>
        <member name="T:Caliburn.Micro.IParent">
            <summary>
              Interface used to define an object associated to a collection of children.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IParent.GetChildren">
            <summary>
              Gets the children.
            </summary>
            <returns>
              The collection of children.
            </returns>
        </member>
        <member name="T:Caliburn.Micro.IParent`1">
            <summary>
            Interface used to define a specialized parent.
            </summary>
            <typeparam name="T">The type of children.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.IParent`1.GetChildren">
            <summary>
              Gets the children.
            </summary>
            <returns>
              The collection of children.
            </returns>
        </member>
        <member name="T:Caliburn.Micro.IPlatformProvider">
            <summary>
            Interface for platform specific operations that need enlightenment.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.IPlatformProvider.InDesignMode">
            <summary>
              Indicates whether or not the framework is in design-time mode.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.BeginOnUIThread(System.Action)">
            <summary>
              Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.OnUIThreadAsync(System.Action)">
            <summary>
              Executes the action on the UI thread asynchronously.
            </summary>
            <param name = "action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.OnUIThread(System.Action)">
            <summary>
              Executes the action on the UI thread.
            </summary>
            <param name = "action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.GetFirstNonGeneratedView(System.Object)">
            <summary>
            Used to retrieve the root, non-framework-created view.
            </summary>
            <param name="view">The view to search.</param>
            <returns>The root element that was not created by the framework.</returns>
            <remarks>In certain instances the services create UI elements.
            For example, if you ask the window manager to show a UserControl as a dialog, it creates a window to host the UserControl in.
            The WindowManager marks that element as a framework-created element so that it can determine what it created vs. what was intended by the developer.
            Calling GetFirstNonGeneratedView allows the framework to discover what the original element was. 
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.ExecuteOnFirstLoad(System.Object,System.Action{System.Object})">
            <summary>
            Executes the handler the fist time the view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.ExecuteOnLayoutUpdated(System.Object,System.Action{System.Object})">
            <summary>
            Executes the handler the next time the view's LayoutUpdated event fires.
            </summary>
            <param name="view">The view.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.IPlatformProvider.GetViewCloseAction(System.Object,System.Collections.Generic.ICollection{System.Object},System.Nullable{System.Boolean})">
            <summary>
            Get the close action for the specified view model.
            </summary>
            <param name="viewModel">The view model to close.</param>
            <param name="views">The associated views.</param>
            <param name="dialogResult">The dialog result.</param>
            <returns>An <see cref="T:Caliburn.Micro.Action"/> to close the view model.</returns>
        </member>
        <member name="T:Caliburn.Micro.IResult">
            <summary>
            Allows custom code to execute after the return of a action.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IResult.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.Micro.IResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IResult`1">
            <summary>
            Allows custom code to execute after the return of a action.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Caliburn.Micro.IResult`1.Result">
            <summary>
            Gets the result of the asynchronous operation.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IScreen">
            <summary>
            Denotes an instance which implements <see cref="T:Caliburn.Micro.IHaveDisplayName"/>, <see cref="T:Caliburn.Micro.IActivate"/>, 
            <see cref="T:Caliburn.Micro.IDeactivate"/>, <see cref="T:Caliburn.Micro.IGuardClose"/> and <see cref="T:Caliburn.Micro.INotifyPropertyChangedEx"/>
            </summary>
        </member>
        <member name="T:Caliburn.Micro.IViewAware">
            <summary>
            Denotes a class which is aware of its view(s).
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IViewAware.AttachView(System.Object,System.Object)">
            <summary>
            Attaches a view to this instance.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context in which the view appears.</param>
        </member>
        <member name="M:Caliburn.Micro.IViewAware.GetView(System.Object)">
            <summary>
            Gets a view previously attached to this instance.
            </summary>
            <param name="context">The context denoting which view to retrieve.</param>
            <returns>The view.</returns>
        </member>
        <member name="E:Caliburn.Micro.IViewAware.ViewAttached">
            <summary>
            Raised when a view is attached.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.LogManager">
            <summary>
            Used to manage logging.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.LogManager.GetLog">
            <summary>
            Creates an <see cref="T:Caliburn.Micro.ILog"/> for the provided type.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.NonPortableReflectionExtensions">
            <summary>
            A collection of extension methods to help with differing reflection between the portable library and SL5
            </summary>
        </member>
        <member name="T:Caliburn.Micro.OverrideCancelResultDecorator">
            <summary>
            A result decorator that overrides <see cref="F:Caliburn.Micro.ResultCompletionEventArgs.WasCancelled"/> of the decorated <see cref="T:Caliburn.Micro.IResult"/> instance.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.OverrideCancelResultDecorator.#ctor(Caliburn.Micro.IResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.OverrideCancelResultDecorator"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
        </member>
        <member name="M:Caliburn.Micro.OverrideCancelResultDecorator.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="context">The context.</param>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.PlatformProvider">
            <summary>
            Access the current <see cref="T:Caliburn.Micro.IPlatformProvider"/>.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.PlatformProvider.Current">
            <summary>
            Gets or sets the current <see cref="T:Caliburn.Micro.IPlatformProvider"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.PropertyChangedBase">
            <summary>
            A base class that implements the infrastructure for property change notification and automatically performs UI thread marshalling.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.#ctor">
            <summary>
            Creates an instance of <see cref = "T:Caliburn.Micro.PropertyChangedBase" />.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.PropertyChangedBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.PropertyChangedBase.IsNotifying">
            <summary>
            Enables/Disables property change notification.
            Virtualized in order to help with document oriented view models.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.Refresh">
            <summary>
            Raises a change notification indicating that all bindings should be refreshed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name = "propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.NotifyOfPropertyChange``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <typeparam name = "TProperty">The type of the property.</typeparam>
            <param name = "property">The property expression.</param>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Caliburn.Micro.PropertyChangedBase.PropertyChanged" /> event directly.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.OnUIThread(System.Action)">
            <summary>
            Executes the given action on the UI thread
            </summary>
            <remarks>An extension point for subclasses to customise how property change notifications are handled.</remarks>
            <param name="action"></param>
        </member>
        <member name="M:Caliburn.Micro.PropertyChangedBase.Set``1(``0@,``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.RescueResultDecorator`1">
            <summary>
            A result decorator which rescues errors from the decorated result by executing a rescue coroutine.
            </summary>
            <typeparam name="TException">The type of the exception we want to perform the rescue on</typeparam>
        </member>
        <member name="M:Caliburn.Micro.RescueResultDecorator`1.#ctor(Caliburn.Micro.IResult,System.Func{`0,Caliburn.Micro.IResult},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.RescueResultDecorator`1"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="coroutine">The rescue coroutine.</param>
            <param name="cancelResult">Set to true to cancel the result after executing rescue.</param>
        </member>
        <member name="M:Caliburn.Micro.RescueResultDecorator`1.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="context">The context.</param>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.ResultCompletionEventArgs">
            <summary>
            The event args for the Completed event of an <see cref="T:Caliburn.Micro.IResult"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ResultCompletionEventArgs.Error">
            <summary>
            Gets or sets the error if one occurred.
            </summary>
            <value>The error.</value>
        </member>
        <member name="F:Caliburn.Micro.ResultCompletionEventArgs.WasCancelled">
            <summary>
            Gets or sets a value indicating whether the result was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.Micro.ResultDecoratorBase">
            <summary>
            Base class for all <see cref="T:Caliburn.Micro.IResult"/> decorators.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ResultDecoratorBase.#ctor(Caliburn.Micro.IResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.ResultDecoratorBase"/> class.
            </summary>
            <param name="result">The result to decorate.</param>
        </member>
        <member name="M:Caliburn.Micro.ResultDecoratorBase.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.ResultDecoratorBase.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Called when the execution of the decorated result has completed.
            </summary>
            <param name="context">The context.</param>
            <param name="innerResult">The decorated result.</param>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Caliburn.Micro.ResultDecoratorBase.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ResultDecoratorBase.OnCompleted(Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>
            Raises the <see cref="E:Caliburn.Micro.ResultDecoratorBase.Completed" /> event.
            </summary>
            <param name="args">The <see cref="T:Caliburn.Micro.ResultCompletionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Micro.ResultExtensions">
            <summary>
            Extension methods for <see cref="T:Caliburn.Micro.IResult"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ResultExtensions.WhenCancelled(Caliburn.Micro.IResult,System.Func{Caliburn.Micro.IResult})">
            <summary>
            Adds behavior to the result which is executed when the <paramref name ="result"/> was cancelled.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="coroutine">The coroutine to execute when <paramref name="result"/> was canceled.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.ResultExtensions.OverrideCancel(Caliburn.Micro.IResult)">
            <summary>
            Overrides <see cref="F:Caliburn.Micro.ResultCompletionEventArgs.WasCancelled"/> of the decorated <paramref name="result"/> instance.
            </summary>
            <param name="result">The result to decorate.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.ResultExtensions.Rescue``1(Caliburn.Micro.IResult,System.Func{``0,Caliburn.Micro.IResult},System.Boolean)">
            <summary>
            Rescues <typeparamref name="TException"/> from the decorated <paramref name="result"/> by executing a <paramref name="rescue"/> coroutine.
            </summary>
            <typeparam name = "TException">The type of the exception we want to perform the rescue on.</typeparam>
            <param name="result">The result to decorate.</param>
            <param name="rescue">The rescue coroutine.</param>
            <param name="cancelResult">Set to true to cancel the result after executing rescue.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.ResultExtensions.Rescue(Caliburn.Micro.IResult,System.Func{System.Exception,Caliburn.Micro.IResult},System.Boolean)">
            <summary>
            Rescues any exception from the decorated <paramref name="result"/> by executing a <paramref name="rescue"/> coroutine.
            </summary>
            <param name="result">The result to decorate.</param>
            <param name="rescue">The rescue coroutine.</param>
            <param name="cancelResult">Set to true to cancel the result after executing rescue.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.Screen">
            <summary>
            A base implementation of <see cref = "T:Caliburn.Micro.IScreen" />.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Screen.#ctor">
            <summary>
            Creates an instance of the screen.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Screen.Parent">
            <summary>
            Gets or Sets the Parent <see cref = "T:Caliburn.Micro.IConductor" />
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Screen.DisplayName">
            <summary>
            Gets or Sets the Display Name
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Screen.IsActive">
            <summary>
            Indicates whether or not this instance is currently active.
            Virtualized in order to help with document oriented view models.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Screen.IsInitialized">
            <summary>
            Indicates whether or not this instance is currently initialized.
            Virtualized in order to help with document oriented view models.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Screen.Activated">
            <summary>
            Raised after activation occurs.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Screen.AttemptingDeactivation">
            <summary>
            Raised before deactivation.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.Screen.Deactivated">
            <summary>
            Raised after deactivation.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Screen.OnInitialize">
            <summary>
            Called when initializing.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Screen.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Screen.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name = "close">Inidicates whether this instance will be closed.</param>
        </member>
        <member name="M:Caliburn.Micro.Screen.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name = "callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:Caliburn.Micro.Screen.TryClose(System.Nullable{System.Boolean})">
            <summary>
            Tries to close this instance by asking its Parent to initiate shutdown or by asking its corresponding view to close.
            Also provides an opportunity to pass a dialog result to it's corresponding view.
            </summary>
            <param name="dialogResult">The dialog result.</param>
        </member>
        <member name="T:Caliburn.Micro.ScreenExtensions">
            <summary>
            Hosts extension methods for <see cref="T:Caliburn.Micro.IScreen"/> classes.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.TryActivate(System.Object)">
            <summary>
            Activates the item if it implements <see cref="T:Caliburn.Micro.IActivate"/>, otherwise does nothing.
            </summary>
            <param name="potentialActivatable">The potential activatable.</param>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.TryDeactivate(System.Object,System.Boolean)">
            <summary>
            Deactivates the item if it implements <see cref="T:Caliburn.Micro.IDeactivate"/>, otherwise does nothing.
            </summary>
            <param name="potentialDeactivatable">The potential deactivatable.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.CloseItem(Caliburn.Micro.IConductor,System.Object)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="conductor">The conductor.</param>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.CloseItem``1(Caliburn.Micro.ConductorBase{``0},``0)">
            <summary>
            Closes the specified item.
            </summary>
            <param name="conductor">The conductor.</param>
            <param name="item">The item to close.</param>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.ActivateWith(Caliburn.Micro.IActivate,Caliburn.Micro.IActivate)">
            <summary>
             Activates a child whenever the specified parent is activated.
            </summary>
            <param name="child">The child to activate.</param>
            <param name="parent">The parent whose activation triggers the child's activation.</param>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.DeactivateWith(Caliburn.Micro.IDeactivate,Caliburn.Micro.IDeactivate)">
            <summary>
             Deactivates a child whenever the specified parent is deactivated.
            </summary>
            <param name="child">The child to deactivate.</param>
            <param name="parent">The parent whose deactivation triggers the child's deactivation.</param>
        </member>
        <member name="M:Caliburn.Micro.ScreenExtensions.ConductWith``2(``0,``1)">
            <summary>
             Activates and Deactivates a child whenever the specified parent is Activated or Deactivated.
            </summary>
            <param name="child">The child to activate/deactivate.</param>
            <param name="parent">The parent whose activation/deactivation triggers the child's activation/deactivation.</param>
        </member>
        <member name="T:Caliburn.Micro.SequentialResult">
            <summary>
              An implementation of <see cref = "T:Caliburn.Micro.IResult" /> that enables sequential execution of multiple results.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SequentialResult.#ctor(System.Collections.Generic.IEnumerator{Caliburn.Micro.IResult})">
            <summary>
              Initializes a new instance of the <see cref = "T:Caliburn.Micro.SequentialResult" /> class.
            </summary>
            <param name = "enumerator">The enumerator.</param>
        </member>
        <member name="E:Caliburn.Micro.SequentialResult.Completed">
            <summary>
              Occurs when execution has completed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SequentialResult.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
              Executes the result using the specified context.
            </summary>
            <param name = "context">The context.</param>
        </member>
        <member name="T:Caliburn.Micro.SimpleContainer">
            <summary>
              A simple IoC container.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.#ctor">
            <summary>
              Initializes a new instance of the <see cref = "T:Caliburn.Micro.SimpleContainer" /> class.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.RegisterInstance(System.Type,System.String,System.Object)">
            <summary>
              Registers the instance.
            </summary>
            <param name = "service">The service.</param>
            <param name = "key">The key.</param>
            <param name = "implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.RegisterPerRequest(System.Type,System.String,System.Type)">
            <summary>
              Registers the class so that a new instance is created on every request.
            </summary>
            <param name = "service">The service.</param>
            <param name = "key">The key.</param>
            <param name = "implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.RegisterSingleton(System.Type,System.String,System.Type)">
            <summary>
              Registers the class so that it is created once, on first request, and the same instance is returned to all requestors thereafter.
            </summary>
            <param name = "service">The service.</param>
            <param name = "key">The key.</param>
            <param name = "implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.RegisterHandler(System.Type,System.String,System.Func{Caliburn.Micro.SimpleContainer,System.Object})">
            <summary>
              Registers a custom handler for serving requests from the container.
            </summary>
            <param name = "service">The service.</param>
            <param name = "key">The key.</param>
            <param name = "handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.UnregisterHandler(System.Type,System.String)">
            <summary>
              Unregisters any handlers for the service/key that have previously been registered.
            </summary>
            <param name = "service">The service.</param>
            <param name = "key">The key.</param>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.GetInstance(System.Type,System.String)">
            <summary>
              Requests an instance.
            </summary>
            <param name = "service">The service.</param>
            <param name = "key">The key.</param>
            <returns>The instance, or null if a handler is not found.</returns>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.HasHandler(System.Type,System.String)">
            <summary>
            Determines if a handler for the service/key has previously been registered.
            </summary>
            <param name="service">The service.</param>
            <param name="key">The key.</param>
            <returns>True if a handler is registere; false otherwise.</returns>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.GetAllInstances(System.Type)">
            <summary>
              Requests all instances of a given type.
            </summary>
            <param name = "service">The service.</param>
            <returns>All the instances or an empty enumerable if none are found.</returns>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.BuildUp(System.Object)">
            <summary>
              Pushes dependencies into an existing instance based on interface properties with setters.
            </summary>
            <param name = "instance">The instance.</param>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.CreateChildContainer">
            <summary>
            Creates a child container.
            </summary>
            <returns>A new container.</returns>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.BuildInstance(System.Type)">
            <summary>
              Actually does the work of creating the instance and satisfying it's constructor dependencies.
            </summary>
            <param name = "type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.SimpleContainer.ActivateInstance(System.Type,System.Object[])">
            <summary>
              Creates an instance of the type with the specified constructor arguments.
            </summary>
            <param name = "type">The type.</param>
            <param name = "args">The constructor args.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="E:Caliburn.Micro.SimpleContainer.Activated">
            <summary>
              Occurs when a new instance is created.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.SimpleResult">
            <summary>
            A simple result.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SimpleResult.Succeeded">
            <summary>
            A result that is always succeeded.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SimpleResult.Cancelled">
            <summary>
            A result that is always canceled.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Caliburn.Micro.SimpleResult.Failed(System.Exception)">
            <summary>
            A result that is always failed.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.SimpleResult.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.Micro.SimpleResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.TaskExtensions">
            <summary>
            Extension methods to bring <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:Caliburn.Micro.IResult"/> together.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.TaskExtensions.ExecuteAsync(Caliburn.Micro.IResult,Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes an <see cref="T:Caliburn.Micro.IResult"/> asynchronous.
            </summary>
            <param name="result">The coroutine to execute.</param>
            <param name="context">The context to execute the coroutine within.</param>
            <returns>A task that represents the asynchronous coroutine.</returns>
        </member>
        <member name="M:Caliburn.Micro.TaskExtensions.ExecuteAsync``1(Caliburn.Micro.IResult{``0},Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes an <see cref="T:Caliburn.Micro.IResult`1"/> asynchronous.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="result">The coroutine to execute.</param>
            <param name="context">The context to execute the coroutine within.</param>
            <returns>A task that represents the asynchronous coroutine.</returns>
        </member>
        <member name="M:Caliburn.Micro.TaskExtensions.AsResult(System.Threading.Tasks.Task)">
            <summary>
            Encapsulates a task inside a couroutine.
            </summary>
            <param name="task">The task.</param>
            <returns>The coroutine that encapsulates the task.</returns>
        </member>
        <member name="M:Caliburn.Micro.TaskExtensions.AsResult``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Encapsulates a task inside a couroutine.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="task">The task.</param>
            <returns>The coroutine that encapsulates the task.</returns>
        </member>
        <member name="T:Caliburn.Micro.TaskResult">
            <summary>
            A couroutine that encapsulates an <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.TaskResult.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.TaskResult"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Caliburn.Micro.TaskResult.Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>
            Executes the result using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.Micro.TaskResult.OnCompleted(System.Threading.Tasks.Task)">
            <summary>
            Called when the asynchronous task has completed.
            </summary>
            <param name="task">The completed task.</param>
        </member>
        <member name="E:Caliburn.Micro.TaskResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.TaskResult`1">
            <summary>
            A couroutine that encapsulates an <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.TaskResult`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.TaskResult`1"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Caliburn.Micro.TaskResult`1.Result">
            <summary>
            Gets the result of the asynchronous operation.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.TaskResult`1.OnCompleted(System.Threading.Tasks.Task)">
            <summary>
            Called when the asynchronous task has completed.
            </summary>
            <param name="task">The completed task.</param>
        </member>
        <member name="T:Caliburn.Micro.ViewAttachedEventArgs">
            <summary>
            The event args for the <see cref="E:Caliburn.Micro.IViewAware.ViewAttached"/> event.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewAttachedEventArgs.View">
            <summary>
            The view.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewAttachedEventArgs.Context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ViewAware">
            <summary>
            A base implementation of <see cref = "T:Caliburn.Micro.IViewAware" /> which is capable of caching views by context.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewAware.DefaultContext">
            <summary>
            The default view context.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.ViewAware.Views">
            <summary>
            The view chache for this instance.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ViewAware.#ctor">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Micro.ViewAware"/>.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.ViewAware.ViewAttached">
            <summary>
            Raised when a view is attached.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ViewAware.OnViewAttached(System.Object,System.Object)">
            <summary>
            Called when a view is attached.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context in which the view appears.</param>
        </member>
        <member name="M:Caliburn.Micro.ViewAware.OnViewLoaded(System.Object)">
            <summary>
            Called when an attached view's Loaded event fires.
            </summary>
            <param name = "view"></param>
        </member>
        <member name="M:Caliburn.Micro.ViewAware.OnViewReady(System.Object)">
            <summary>
            Called the first time the page's LayoutUpdated event fires after it is navigated to.
            </summary>
            <param name = "view"></param>
        </member>
        <member name="M:Caliburn.Micro.ViewAware.GetView(System.Object)">
            <summary>
            Gets a view previously attached to this instance.
            </summary>
            <param name = "context">The context denoting which view to retrieve.</param>
            <returns>The view.</returns>
        </member>
        <member name="T:Caliburn.Micro.WeakValueDictionary`2">
            <summary>
            A dictionary in which the values are weak references.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparer for the key type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.</param>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> can contain.</param>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.WeakValueDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.
            </summary>
            <remarks>
            Since the items in the dictionary are held by weak reference, the count value
            cannot be relied upon to guarantee the number of objects that would be discovered via
            enumeration. Treat the Count as an estimate only.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.</returns>
        </member>
        <member name="M:Caliburn.Micro.WeakValueDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key, 
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Caliburn.Micro.WeakValueDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, 
            and a set operation creates a new element with the specified key.
            </returns>
        </member>
        <member name="P:Caliburn.Micro.WeakValueDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.WeakValueDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Caliburn.Micro.WeakValueDictionary`2"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.DependencyPropertyHelper">
            <summary>
            Class that abstracts the differences in creating a DepedencyProperty / BindableProperty on the different platforms.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.DependencyPropertyHelper.RegisterAttached(System.String,System.Type,System.Type,System.Object,System.Windows.PropertyChangedCallback)">
            <summary>
            Register an attached dependency / bindable property
            </summary>
            <param name="name">The property name</param>
            <param name="propertyType">The property type</param>
            <param name="ownerType">The owner type</param>
            <param name="defaultValue">The default value</param>
            <param name="propertyChangedCallback">Callback to executed on property changed</param>
            <returns>The registred attached dependecy property</returns>
        </member>
        <member name="M:Caliburn.Micro.DependencyPropertyHelper.Register(System.String,System.Type,System.Type,System.Object,System.Windows.PropertyChangedCallback)">
            <summary>
            Register a dependency / bindable property
            </summary>
            <param name="name">The property name</param>
            <param name="propertyType">The property type</param>
            <param name="ownerType">The owner type</param>
            <param name="defaultValue">The default value</param>
            <param name="propertyChangedCallback">Callback to executed on property changed</param>
            <returns>The registred dependecy property</returns>
        </member>
        <member name="T:Caliburn.Micro.ElementConvention">
            <summary>
            Represents the conventions for a particular element type.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ElementConvention.ElementType">
            <summary>
            The type of element to which the conventions apply.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ElementConvention.GetBindableProperty">
            <summary>
            Gets the default property to be used in binding conventions.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ElementConvention.CreateTrigger">
            <summary>
            The default trigger to be used when wiring actions on this element.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ElementConvention.ParameterProperty">
            <summary>
            The default property to be used for parameters of this type in actions.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ElementConvention.ApplyBinding">
            <summary>
            Applies custom conventions for elements of this type.
            </summary>
            <remarks>Pass the view model type, property path, property instance, framework element and its convention.</remarks>
        </member>
        <member name="T:Caliburn.Micro.IHaveParameters">
            <summary>
            Indicates that a message is parameterized.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.IHaveParameters.Parameters">
            <summary>
            Represents the parameters of a message.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.INavigationService">
            <summary>
              Implemented by services that provide <see cref="T:System.Uri" /> based navigation.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.INavigationService.NavigateToViewModel(System.Type,System.Object)">
            <summary>
            Navigates to the view represented by the given view model.
            </summary>
            <param name="viewModel">The view model to navigate to.</param>
            <param name="extraData">Extra data to populate the view model with.</param>
        </member>
        <member name="M:Caliburn.Micro.INavigationService.NavigateToViewModel``1(System.Object)">
            <summary>
            Navigates to the view represented by the given view model.
            </summary>
            <typeparam name="TViewModel">The view model to navigate to.</typeparam>
            <param name="extraData">Extra data to populate the view model with.</param>
        </member>
        <member name="P:Caliburn.Micro.INavigationService.CanGoBack">
            <summary>
              Indicates whether the navigator can navigate back.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.INavigationService.CanGoForward">
            <summary>
              Indicates whether the navigator can navigate forward.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.INavigationService.CurrentContent">
            <summary>
              The current content.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.INavigationService.StopLoading">
            <summary>
              Stops the loading process.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.INavigationService.GoBack">
            <summary>
              Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.INavigationService.GoForward">
            <summary>
              Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.INavigationService.RemoveBackEntry">
            <summary>
              Removes the most recent entry from the back stack.
            </summary>
            <returns> The entry that was removed. </returns>
        </member>
        <member name="E:Caliburn.Micro.INavigationService.Navigated">
            <summary>
              Raised after navigation.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.INavigationService.Navigating">
            <summary>
              Raised prior to navigation.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.INavigationService.NavigationFailed">
            <summary>
              Raised when navigation fails.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.INavigationService.NavigationStopped">
            <summary>
              Raised when navigation is stopped.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.INavigationService.FragmentNavigation">
            <summary>
              Raised when a fragment navigation occurs.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.FrameAdapter">
            <summary>
              A basic implementation of <see cref="T:Caliburn.Micro.INavigationService" /> designed to adapt the <see cref="T:System.Windows.Controls.Frame" /> control.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.#ctor(System.Windows.Controls.Frame,System.Boolean)">
            <summary>
              Creates an instance of <see cref="T:Caliburn.Micro.FrameAdapter" />
            </summary>
            <param name="frame"> The frame to represent as a <see cref="T:Caliburn.Micro.INavigationService" /> . </param>
            <param name="treatViewAsLoaded"> Tells the frame adapter to assume that the view has already been loaded by the time OnNavigated is called. This is necessary when using the TransitionFrame. </param>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.OnNavigating(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
              Occurs before navigation
            </summary>
            <param name="sender"> The event sender. </param>
            <param name="e"> The event args. </param>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.CanCloseOnNavigating(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Called to check whether or not to close current instance on navigating.
            </summary>
            <param name="sender"> The event sender from OnNavigating event. </param>
            <param name="e"> The event args from OnNavigating event. </param>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.OnNavigated(System.Object,System.Windows.Navigation.NavigationEventArgs)">
            <summary>
              Occurs after navigation
            </summary>
            <param name="sender"> The event sender. </param>
            <param name="e"> The event args. </param>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.TryInjectParameters(System.Object,System.Object)">
            <summary>
              Attempts to inject query string parameters from the view into the view model.
            </summary>
            <param name="viewModel"> The view model.</param>
            <param name="parameter"> The parameter.</param>
        </member>
        <member name="P:Caliburn.Micro.FrameAdapter.Source">
            <summary>
              The <see cref="T:System.Uri" /> source.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.FrameAdapter.CanGoBack">
            <summary>
              Indicates whether the navigator can navigate back.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.FrameAdapter.CanGoForward">
            <summary>
              Indicates whether the navigator can navigate forward.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.FrameAdapter.CurrentSource">
            <summary>
              The current <see cref="T:System.Uri" /> source.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.FrameAdapter.CurrentContent">
            <summary>
              The current content.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.StopLoading">
            <summary>
              Stops the loading process.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.GoBack">
            <summary>
              Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.GoForward">
            <summary>
              Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.NavigateToViewModel(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.NavigateToViewModel``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Caliburn.Micro.FrameAdapter.RemoveBackEntry">
            <summary>
              Removes the most recent entry from the back stack.
            </summary>
            <returns> The entry that was removed. </returns>
        </member>
        <member name="E:Caliburn.Micro.FrameAdapter.Navigated">
            <summary>
              Raised after navigation.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.FrameAdapter.Navigating">
            <summary>
              Raised prior to navigation.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.FrameAdapter.NavigationFailed">
            <summary>
              Raised when navigation fails.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.FrameAdapter.NavigationStopped">
            <summary>
              Raised when navigation is stopped.
            </summary>
        </member>
        <member name="E:Caliburn.Micro.FrameAdapter.FragmentNavigation">
            <summary>
              Raised when a fragment navigation occurs.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Message">
            <summary>
              Host's attached properties related to routed UI messaging.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Message.SetHandler(System.Windows.DependencyObject,System.Object)">
            <summary>
              Places a message handler on this element.
            </summary>
            <param name="d"> The element. </param>
            <param name="value"> The message handler. </param>
        </member>
        <member name="M:Caliburn.Micro.Message.GetHandler(System.Windows.DependencyObject)">
            <summary>
              Gets the message handler for this element.
            </summary>
            <param name="d"> The element. </param>
            <returns> The message handler. </returns>
        </member>
        <member name="F:Caliburn.Micro.Message.AttachProperty">
            <summary>
              A property definition representing attached triggers and messages.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Message.SetAttach(System.Windows.DependencyObject,System.String)">
            <summary>
              Sets the attached triggers and messages.
            </summary>
            <param name="d"> The element to attach to. </param>
            <param name="attachText"> The parsable attachment text. </param>
        </member>
        <member name="M:Caliburn.Micro.Message.GetAttach(System.Windows.DependencyObject)">
            <summary>
              Gets the attached triggers and messages.
            </summary>
            <param name="d"> The element that was attached to. </param>
            <returns> The parsable attachment text. </returns>
        </member>
        <member name="T:Caliburn.Micro.MessageBinder">
            <summary>
            A service that is capable of properly binding values to a method's parameters and creating instances of <see cref="T:Caliburn.Micro.IResult"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.MessageBinder.SpecialValues">
            <summary>
            The special parameter values recognized by the message binder along with their resolvers.
            Parameter names are case insensitive so the specified names are unique and can be used with different case variations
            </summary>
        </member>
        <member name="F:Caliburn.Micro.MessageBinder.CustomConverters">
            <summary>
            Custom converters used by the framework registered by destination type for which they will be selected.
            The converter is passed the existing value to convert and a "context" object.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.MessageBinder.DetermineParameters(Caliburn.Micro.ActionExecutionContext,System.Reflection.ParameterInfo[])">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="context">The action execution context.</param>
            <param name="requiredParameters">The parameters required to complete the invocation.</param>
            <returns>The actual parameter values.</returns>
        </member>
        <member name="F:Caliburn.Micro.MessageBinder.EvaluateParameter">
            <summary>
            Transforms the textual parameter into the actual parameter.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.MessageBinder.CoerceValue(System.Type,System.Object,System.Object)">
            <summary>
            Coerces the provided value to the destination type.
            </summary>
            <param name="destinationType">The destination type.</param>
            <param name="providedValue">The provided value.</param>
            <param name="context">An optional context value which can be used during conversion.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:Caliburn.Micro.MessageBinder.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="T:Caliburn.Micro.NavigationExtensions">
            <summary>
            Extension methods related to navigation.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.NavigationExtensions.For``1(Caliburn.Micro.INavigationService)">
            <summary>
            Creates a Uri builder based on a view model type.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="navigationService">The navigation service.</param>
            <returns>The builder.</returns>
        </member>
        <member name="T:Caliburn.Micro.NavigationHelper`1">
            <summary>
            Builds a Uri in a strongly typed fashion, based on a ViewModel.
            </summary>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="M:Caliburn.Micro.NavigationHelper`1.WithParam``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Adds a query string parameter to the Uri.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Caliburn.Micro.NavigationHelper`1.AttachTo(Caliburn.Micro.INavigationService)">
            <summary>
            Attaches a navigation servies to this builder.
            </summary>
            <param name="navigationService">The navigation service.</param>
            <returns>Itself</returns>
        </member>
        <member name="M:Caliburn.Micro.NavigationHelper`1.Navigate">
            <summary>
            Navigates to the Uri represented by this builder.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.Parameter">
            <summary>
            Represents a parameter of an <see cref="T:Caliburn.Micro.ActionMessage"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Parameter.ValueProperty">
            <summary>
            A dependency property representing the parameter's value.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Caliburn.Micro.Parameter.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Parameter.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.Micro.Parameter.MakeAwareOf(Caliburn.Micro.ActionMessage)">
            <summary>
            Makes the parameter aware of the <see cref="T:Caliburn.Micro.ActionMessage"/> that it's attached to.
            </summary>
            <param name="owner">The action message.</param>
        </member>
        <member name="T:Caliburn.Micro.Parser">
            <summary>
            Parses text into a fully functional set of <see cref="T:Microsoft.Xaml.Behaviors.TriggerBase"/> instances with <see cref="T:Caliburn.Micro.ActionMessage"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Parser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="text">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="F:Caliburn.Micro.Parser.CreateTrigger">
            <summary>
            The function used to generate a trigger.
            </summary>
            <remarks>The parameters passed to the method are the the target of the trigger and string representing the trigger.</remarks>
        </member>
        <member name="M:Caliburn.Micro.Parser.CreateMessage(System.Windows.DependencyObject,System.String)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Micro.ActionMessage"/> by parsing out the textual dsl.
            </summary>
            <param name="target">The target of the message.</param>
            <param name="messageText">The textual message dsl.</param>
            <returns>The created message.</returns>
        </member>
        <member name="F:Caliburn.Micro.Parser.InterpretMessageText">
            <summary>
            Function used to parse a string identified as a message.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.Parser.CreateParameter">
            <summary>
            Function used to parse a string identified as a message parameter.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.Parser.BindParameter(System.Windows.FrameworkElement,Caliburn.Micro.Parameter,System.String,System.String,System.Windows.Data.BindingMode)">
            <summary>
            Creates a binding on a <see cref="T:Caliburn.Micro.Parameter"/>.
            </summary>
            <param name="target">The target to which the message is applied.</param>
            <param name="parameter">The parameter object.</param>
            <param name="elementName">The name of the element to bind to.</param>
            <param name="path">The path of the element to bind to.</param>
            <param name="bindingMode">The binding mode to use.</param>
        </member>
        <member name="T:Caliburn.Micro.AssemblySource">
            <summary>
            A source of assemblies that are inspectable by the framework.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.AssemblySource.Instance">
            <summary>
            The singleton instance of the AssemblySource used by the framework.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.AssemblySource.FindTypeByNames">
            <summary>
            Finds a type which matches one of the elements in the sequence of names.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.AssemblySourceCache">
            <summary>
            A caching subsystem for <see cref="T:Caliburn.Micro.AssemblySource"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.AssemblySourceCache.ExtractTypes">
            <summary>
            Extracts the types from the spezified assembly for storing in the cache.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.AssemblySourceCache.Install">
            <summary>
            Installs the caching subsystem.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ExtensionMethods">
            <summary>
            Generic extension methods used by the framework.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Get's the name of the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The assembly's name.</returns>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets all the attributes of a particular type.
            </summary>
            <typeparam name="T">The type of attributes to get.</typeparam>
            <param name="member">The member to inspect for attributes.</param>
            <param name="inherit">Whether or not to search for inherited attributes.</param>
            <returns>The list of attributes found.</returns>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetExportedTypes(System.Reflection.Assembly)">
            <summary>
            Gets a collection of the public types defined in this assembly that are visible outside the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A collection of the public types defined in this assembly that are visible outside the assembly.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Returns a value that indicates whether the specified type can be assigned to the current type.
            </summary>
            <param name="target">The target type</param>
            <param name="type">The type to check.</param>
            <returns>true if the specified type can be assigned to this type; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value for a key. If the key does not exist, return default(TValue);
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to call this method on.</param>
            <param name="key">The key to look up.</param>
            <returns>The key value. default(TValue) if this key is not in the dictionary.</returns>
        </member>
        <member name="T:Caliburn.Micro.NameTransformer">
            <summary>
             Class for managing the list of rules for doing name transformation.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.NameTransformer.UseEagerRuleSelection">
            <summary>
            Flag to indicate if transformations from all matched rules are returned. Otherwise, transformations from only the first matched rule are returned.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.AddRule(System.String,System.String,System.String)">
            <summary>
             Adds a transform using a single replacement value and a global filter pattern.
            </summary>
            <param name = "replacePattern">Regular expression pattern for replacing text</param>
            <param name = "replaceValue">The replacement value.</param>
            <param name = "globalFilterPattern">Regular expression pattern for global filtering</param>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.AddRule(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Adds a transform using a list of replacement values and a global filter pattern.
            </summary>
            <param name = "replacePattern">Regular expression pattern for replacing text</param>
            <param name = "replaceValueList">The list of replacement values</param>
            <param name = "globalFilterPattern">Regular expression pattern for global filtering</param>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.Transform(System.String)">
            <summary>
            Gets the list of transformations for a given name.
            </summary>
            <param name = "source">The name to transform into the resolved name list</param>
            <returns>The transformed names.</returns>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.Transform(System.String,System.Func{System.String,System.String})">
            <summary>
            Gets the list of transformations for a given name.
            </summary>
            <param name = "source">The name to transform into the resolved name list</param>
            <param name = "getReplaceString">A function to do a transform on each item in the ReplaceValueList prior to applying the regular expression transform</param>
            <returns>The transformed names.</returns>
        </member>
        <member name="T:Caliburn.Micro.NameTransformer.Rule">
            <summary>
             A rule that describes a name transform.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.NameTransformer.Rule.GlobalFilterPattern">
            <summary>
            Regular expression pattern for global filtering
            </summary>
        </member>
        <member name="F:Caliburn.Micro.NameTransformer.Rule.ReplacePattern">
            <summary>
            Regular expression pattern for replacing text
            </summary>
        </member>
        <member name="F:Caliburn.Micro.NameTransformer.Rule.ReplacementValues">
            <summary>
            The list of replacement values
            </summary>
        </member>
        <member name="P:Caliburn.Micro.NameTransformer.Rule.GlobalFilterPatternRegex">
            <summary>
            Regular expression for global filtering
            </summary>
        </member>
        <member name="P:Caliburn.Micro.NameTransformer.Rule.ReplacePatternRegex">
            <summary>
            Regular expression for replacing text
            </summary>
        </member>
        <member name="T:Caliburn.Micro.RegExHelper">
            <summary>
             Helper class for encoding strings to regular expression patterns
            </summary>
        </member>
        <member name="F:Caliburn.Micro.RegExHelper.NameRegEx">
            <summary>
            Regular expression pattern for valid name
            </summary>
        </member>
        <member name="F:Caliburn.Micro.RegExHelper.SubNamespaceRegEx">
            <summary>
            Regular expression pattern for subnamespace (including dot)
            </summary>
        </member>
        <member name="F:Caliburn.Micro.RegExHelper.NamespaceRegEx">
            <summary>
            Regular expression pattern for namespace or namespace fragment
            </summary>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.GetCaptureGroup(System.String,System.String)">
            <summary>
            Creates a named capture group with the specified regular expression 
            </summary>
            <param name="groupName">Name of capture group to create</param>
            <param name="regEx">Regular expression pattern to capture</param>
            <returns>Regular expression capture group with the specified group name</returns>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.NamespaceToRegEx(System.String)">
            <summary>
            Converts a namespace (including wildcards) to a regular expression string
            </summary>
            <param name="srcNamespace">Source namespace to convert to regular expression</param>
            <returns>Namespace converted to a regular expression</returns>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.GetNameCaptureGroup(System.String)">
            <summary>
            Creates a capture group for a valid name regular expression pattern
            </summary>
            <param name="groupName">Name of capture group to create</param>
            <returns>Regular expression capture group with the specified group name</returns>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.GetNamespaceCaptureGroup(System.String)">
            <summary>
            Creates a capture group for a namespace regular expression pattern
            </summary>
            <param name="groupName">Name of capture group to create</param>
            <returns>Regular expression capture group with the specified group name</returns>
        </member>
        <member name="T:Caliburn.Micro.StringSplitter">
            <summary>
            Helper class when splitting strings
            </summary>
        </member>
        <member name="M:Caliburn.Micro.StringSplitter.Split(System.String,System.Char)">
            <summary>
            Splits a string with a chosen separator. 
            If a substring is contained in [...] it will not be splitted.
            </summary>
            <param name="message">The message to split</param>
            <param name="separator">The separator to use when splitting</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.StringSplitter.SplitParameters(System.String)">
            <summary>
            Splits a string with , as separator. 
            Does not split within {},[],()
            </summary>
            <param name="parameters">The string to split</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.TypeMappingConfiguration">
            <summary>
            Class to specify settings for configuring type mappings by the ViewLocator or ViewModelLocator
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.DefaultSubNamespaceForViews">
            <summary>
            The default subnamespace for Views. Used for creating default subnamespace mappings. Defaults to "Views".
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.DefaultSubNamespaceForViewModels">
            <summary>
            The default subnamespace for ViewModels. Used for creating default subnamespace mappings. Defaults to "ViewModels".
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.UseNameSuffixesInMappings">
            <summary>
            Flag to indicate whether or not the name of the Type should be transformed when adding a type mapping. Defaults to true.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.NameFormat">
            <summary>
            The format string used to compose the name of a type from base name and name suffix
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.IncludeViewSuffixInViewModelNames">
            <summary>
            Flag to indicate if ViewModel names should include View suffixes (i.e. CustomerPageViewModel vs. CustomerViewModel)
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.ViewSuffixList">
            <summary>
            List of View suffixes for which default type mappings should be created. Applies only when UseNameSuffixesInMappings = true.
            Default values are "View", "Page"
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.ViewModelSuffix">
            <summary>
            The name suffix for ViewModels. Applies only when UseNameSuffixesInMappings = true. The default is "ViewModel".
            </summary>
        </member>
        <member name="T:Caliburn.Micro.View">
            <summary>
            Hosts attached properties related to view models.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.View.IsLoadedProperty">
            <summary>
            A dependency property which allows the framework to track whether a certain element has already been loaded in certain scenarios.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.View.IsScopeRootProperty">
            <summary>
            A dependency property which marks an element as a name scope root.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.View.ApplyConventionsProperty">
            <summary>
            A dependency property which allows the override of convention application behavior.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.View.ContextProperty">
            <summary>
            A dependency property for assigning a context to a particular portion of the UI.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.View.ModelProperty">
            <summary>
            A dependency property for attaching a model to the UI.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.View.IsGeneratedProperty">
            <summary>
            Used by the framework to indicate that this element was generated.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.View.ExecuteOnLoad(System.Windows.FrameworkElement,System.Windows.RoutedEventHandler)">
            <summary>
            Executes the handler immediately if the element is loaded, otherwise wires it to the Loaded event.
            </summary>
            <param name="element">The element.</param>
            <param name="handler">The handler.</param>
            <returns>true if the handler was executed immediately; false otherwise</returns>
        </member>
        <member name="M:Caliburn.Micro.View.ExecuteOnUnload(System.Windows.FrameworkElement,System.Windows.RoutedEventHandler)">
            <summary>
            Executes the handler when the element is unloaded.
            </summary>
            <param name="element">The element.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.View.ExecuteOnLayoutUpdated(System.Windows.FrameworkElement,System.EventHandler)">
            <summary>
            Executes the handler the next time the elements's LayoutUpdated event fires.
            </summary>
            <param name="element">The element.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="F:Caliburn.Micro.View.GetFirstNonGeneratedView">
            <summary>
            Used to retrieve the root, non-framework-created view.
            </summary>
            <param name="view">The view to search.</param>
            <returns>The root element that was not created by the framework.</returns>
            <remarks>In certain instances the services create UI elements.
            For example, if you ask the window manager to show a UserControl as a dialog, it creates a window to host the UserControl in.
            The WindowManager marks that element as a framework-created element so that it can determine what it created vs. what was intended by the developer.
            Calling GetFirstNonGeneratedView allows the framework to discover what the original element was. 
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.View.GetApplyConventions(System.Windows.DependencyObject)">
            <summary>
            Gets the convention application behavior.
            </summary>
            <param name="d">The element the property is attached to.</param>
            <returns>Whether or not to apply conventions.</returns>
        </member>
        <member name="M:Caliburn.Micro.View.SetApplyConventions(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the convention application behavior.
            </summary>
            <param name="d">The element to attach the property to.</param>
            <param name="value">Whether or not to apply conventions.</param>
        </member>
        <member name="M:Caliburn.Micro.View.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the model.
            </summary>
            <param name="d">The element to attach the model to.</param>
            <param name="value">The model.</param>
        </member>
        <member name="M:Caliburn.Micro.View.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model.
            </summary>
            <param name="d">The element the model is attached to.</param>
            <returns>The model.</returns>
        </member>
        <member name="M:Caliburn.Micro.View.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets the context.
            </summary>
            <param name="d">The element the context is attached to.</param>
            <returns>The context.</returns>
        </member>
        <member name="M:Caliburn.Micro.View.SetContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the context.
            </summary>
            <param name="d">The element to attach the context to.</param>
            <param name="value">The context.</param>
        </member>
        <member name="P:Caliburn.Micro.View.InDesignMode">
            <summary>
            Gets a value that indicates whether the process is running in design mode.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ViewLocator">
            <summary>
              A strategy for determining which view to use for a given model.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.NameTransformer">
            <summary>
             Used to transform names.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.ContextSeparator">
            <summary>
              Separator used when resolving View names for context instances.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.ConfigureTypeMappings(Caliburn.Micro.TypeMappingConfiguration)">
            <summary>
            Specifies how type mappings are created, including default type mappings. Calling this method will
            clear all existing name transformation rules and create new default type mappings according to the
            configuration.
            </summary>
            <param name="config">An instance of TypeMappingConfiguration that provides the settings for configuration</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddDefaultTypeMapping(System.String)">
            <summary>
            Adds a default type mapping using the standard namespace mapping convention
            </summary>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.RegisterViewSuffix(System.String)">
            <summary>
            This method registers a View suffix or synonym so that View Context resolution works properly.
            It is automatically called internally when calling AddNamespaceMapping(), AddDefaultTypeMapping(),
            or AddTypeMapping(). It should not need to be called explicitly unless a rule that handles synonyms
            is added directly through the NameTransformer.
            </summary>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View".</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddTypeMapping(System.String,System.String,System.String[],System.String)">
            <summary>
            Adds a standard type mapping based on namespace RegEx replace and filter patterns
            </summary>
            <param name="nsSourceReplaceRegEx">RegEx replace pattern for source namespace</param>
            <param name="nsSourceFilterRegEx">RegEx filter pattern for source namespace</param>
            <param name="nsTargetsRegEx">Array of RegEx replace values for target namespaces</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddTypeMapping(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a standard type mapping based on namespace RegEx replace and filter patterns
            </summary>
            <param name="nsSourceReplaceRegEx">RegEx replace pattern for source namespace</param>
            <param name="nsSourceFilterRegEx">RegEx filter pattern for source namespace</param>
            <param name="nsTargetRegEx">RegEx replace value for target namespace</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddNamespaceMapping(System.String,System.String[],System.String)">
            <summary>
            Adds a standard type mapping based on simple namespace mapping
            </summary>
            <param name="nsSource">Namespace of source type</param>
            <param name="nsTargets">Namespaces of target type as an array</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddNamespaceMapping(System.String,System.String,System.String)">
            <summary>
            Adds a standard type mapping based on simple namespace mapping
            </summary>
            <param name="nsSource">Namespace of source type</param>
            <param name="nsTarget">Namespace of target type</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddSubNamespaceMapping(System.String,System.String[],System.String)">
            <summary>
            Adds a standard type mapping by substituting one subnamespace for another
            </summary>
            <param name="nsSource">Subnamespace of source type</param>
            <param name="nsTargets">Subnamespaces of target type as an array</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.AddSubNamespaceMapping(System.String,System.String,System.String)">
            <summary>
            Adds a standard type mapping by substituting one subnamespace for another
            </summary>
            <param name="nsSource">Subnamespace of source type</param>
            <param name="nsTarget">Subnamespace of target type</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.GetOrCreateViewType">
            <summary>
              Retrieves the view from the IoC container or tries to create it if not found.
            </summary>
            <remarks>
              Pass the type of view as a parameter and recieve an instance of the view.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.ModifyModelTypeAtDesignTime">
            <summary>
            Modifies the name of the type to be used at design time.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.TransformName">
            <summary>
            Transforms a ViewModel type name into all of its possible View type names. Optionally accepts an instance
            of context object
            </summary>
            <returns>Enumeration of transformed names</returns>
            <remarks>Arguments:
            typeName = The name of the ViewModel type being resolved to its companion View.
            context = An instance of the context or null.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.LocateTypeForModelType">
            <summary>
              Locates the view type based on the specified model type.
            </summary>
            <returns>The view.</returns>
            <remarks>
              Pass the model type, display location (or null) and the context instance (or null) as parameters and receive a view type.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.LocateForModelType">
            <summary>
              Locates the view for the specified model type.
            </summary>
            <returns>The view.</returns>
            <remarks>
              Pass the model type, display location (or null) and the context instance (or null) as parameters and receive a view instance.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.LocateForModel">
            <summary>
              Locates the view for the specified model instance.
            </summary>
            <returns>The view.</returns>
            <remarks>
              Pass the model instance, display location (or null) and the context (or null) as parameters and receive a view instance.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewLocator.DeterminePackUriFromType">
            <summary>
            Transforms a view type into a pack uri.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ViewLocator.InitializeComponent(System.Object)">
            <summary>
              When a view does not contain a code-behind file, we need to automatically call InitializeCompoent.
            </summary>
            <param name = "element">The element to initialize</param>
        </member>
        <member name="T:Caliburn.Micro.ViewModelBinder">
            <summary>
            Binds a view to a view model.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewModelBinder.ApplyConventionsByDefault">
            <summary>
            Gets or sets a value indicating whether to apply conventions by default.
            </summary>
            <value>
            	<c>true</c> if conventions should be applied by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Caliburn.Micro.ViewModelBinder.ConventionsAppliedProperty">
            <summary>
            Indicates whether or not the conventions have already been applied to the view.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ViewModelBinder.ShouldApplyConventions(System.Windows.FrameworkElement)">
            <summary>
            Determines whether a view should have conventions applied to it.
            </summary>
            <param name="view">The view to check.</param>
            <returns>Whether or not conventions should be applied to the view.</returns>
        </member>
        <member name="F:Caliburn.Micro.ViewModelBinder.BindProperties">
            <summary>
            Creates data bindings on the view's controls based on the provided properties.
            </summary>
            <remarks>Parameters include named Elements to search through and the type of view model to determine conventions for. Returns unmatched elements.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewModelBinder.BindActions">
            <summary>
            Attaches instances of <see cref="T:Caliburn.Micro.ActionMessage"/> to the view's controls based on the provided methods.
            </summary>
            <remarks>Parameters include the named elements to search through and the type of view model to determine conventions for. Returns unmatched elements.</remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewModelBinder.HandleUnmatchedElements">
            <summary>
            Allows the developer to add custom handling of named elements which were not matched by any default conventions.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewModelBinder.Bind">
             <summary>
             Binds the specified viewModel to the view.
             </summary>
            <remarks>Passes the the view model, view and creation context (or null for default) to use in applying binding.</remarks>
        </member>
        <member name="T:Caliburn.Micro.ViewModelLocator">
            <summary>
              A strategy for determining which view model to use for a given view.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewModelLocator.NameTransformer">
            <summary>
             Used to transform names.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.ViewModelLocator.InterfaceCaptureGroupName">
            <summary>
            The name of the capture group used as a marker for rules that return interface types
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.ConfigureTypeMappings(Caliburn.Micro.TypeMappingConfiguration)">
            <summary>
            Specifies how type mappings are created, including default type mappings. Calling this method will
            clear all existing name transformation rules and create new default type mappings according to the
            configuration.
            </summary>
            <param name="config">An instance of TypeMappingConfiguration that provides the settings for configuration</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddDefaultTypeMapping(System.String)">
            <summary>
            Adds a default type mapping using the standard namespace mapping convention
            </summary>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddTypeMapping(System.String,System.String,System.String[],System.String)">
            <summary>
            Adds a standard type mapping based on namespace RegEx replace and filter patterns
            </summary>
            <param name="nsSourceReplaceRegEx">RegEx replace pattern for source namespace</param>
            <param name="nsSourceFilterRegEx">RegEx filter pattern for source namespace</param>
            <param name="nsTargetsRegEx">Array of RegEx replace values for target namespaces</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddTypeMapping(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a standard type mapping based on namespace RegEx replace and filter patterns
            </summary>
            <param name="nsSourceReplaceRegEx">RegEx replace pattern for source namespace</param>
            <param name="nsSourceFilterRegEx">RegEx filter pattern for source namespace</param>
            <param name="nsTargetRegEx">RegEx replace value for target namespace</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddNamespaceMapping(System.String,System.String[],System.String)">
            <summary>
            Adds a standard type mapping based on simple namespace mapping
            </summary>
            <param name="nsSource">Namespace of source type</param>
            <param name="nsTargets">Namespaces of target type as an array</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddNamespaceMapping(System.String,System.String,System.String)">
            <summary>
            Adds a standard type mapping based on simple namespace mapping
            </summary>
            <param name="nsSource">Namespace of source type</param>
            <param name="nsTarget">Namespace of target type</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddSubNamespaceMapping(System.String,System.String[],System.String)">
            <summary>
            Adds a standard type mapping by substituting one subnamespace for another
            </summary>
            <param name="nsSource">Subnamespace of source type</param>
            <param name="nsTargets">Subnamespaces of target type as an array</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.AddSubNamespaceMapping(System.String,System.String,System.String)">
            <summary>
            Adds a standard type mapping by substituting one subnamespace for another
            </summary>
            <param name="nsSource">Subnamespace of source type</param>
            <param name="nsTarget">Subnamespace of target type</param>
            <param name="viewSuffix">Suffix for type name. Should  be "View" or synonym of "View". (Optional)</param>
        </member>
        <member name="M:Caliburn.Micro.ViewModelLocator.MakeInterface(System.String)">
            <summary>
              Makes a type name into an interface name.
            </summary>
            <param name = "typeName">The part.</param>
            <returns></returns>
        </member>
        <member name="F:Caliburn.Micro.ViewModelLocator.TransformName">
            <summary>
            Transforms a View type name into all of its possible ViewModel type names. Accepts a flag
            to include or exclude interface types.
            </summary>
            <returns>Enumeration of transformed names</returns>
            <remarks>Arguments:
            typeName = The name of the View type being resolved to its companion ViewModel.
            includeInterfaces = Flag to indicate if interface types are included
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewModelLocator.LocateTypeForViewType">
            <summary>
              Determines the view model type based on the specified view type.
            </summary>
            <returns>The view model type.</returns>
            <remarks>
              Pass the view type and receive a view model type. Pass true for the second parameter to search for interfaces.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewModelLocator.LocateForViewType">
            <summary>
              Locates the view model for the specified view type.
            </summary>
            <returns>The view model.</returns>
            <remarks>
              Pass the view type as a parameter and receive a view model instance.
            </remarks>
        </member>
        <member name="F:Caliburn.Micro.ViewModelLocator.LocateForView">
            <summary>
              Locates the view model for the specified view instance.
            </summary>
            <returns>The view model.</returns>
            <remarks>
              Pass the view instance as a parameters and receive a view model instance.
            </remarks>
        </member>
        <member name="T:Caliburn.Micro.IWindowManager">
            <summary>
            A service that manages windows.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.IWindowManager.ShowDialog(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Shows a modal dialog for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="settings">The optional dialog settings.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Caliburn.Micro.IWindowManager.ShowWindow(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Shows a non-modal window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="settings">The optional window settings.</param>
        </member>
        <member name="M:Caliburn.Micro.IWindowManager.ShowPopup(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Shows a popup at the current mouse position.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The view context.</param>
            <param name="settings">The optional popup settings.</param>
        </member>
        <member name="T:Caliburn.Micro.WindowManager">
            <summary>
            A service that manages windows.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.ShowDialog(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Shows a modal dialog for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="settings">The dialog popup settings.</param>
            <returns>The dialog result.</returns>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.ShowWindow(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="settings">The optional window settings.</param>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.ShowPopup(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Shows a popup at the current mouse position.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The view context.</param>
            <param name="settings">The optional popup settings.</param>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.CreatePopup(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a popup for hosting a popup window.
            </summary>
            <param name="rootModel">The model.</param>
            <param name="settings">The optional popup settings.</param>
            <returns>The popup.</returns>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.CreateWindow(System.Object,System.Boolean,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a window.
            </summary>
            <param name="rootModel">The view model.</param>
            <param name="isDialog">Whethor or not the window is being shown as a dialog.</param>
            <param name="context">The view context.</param>
            <param name="settings">The optional popup settings.</param>
            <returns>The window.</returns>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.EnsureWindow(System.Object,System.Object,System.Boolean)">
            <summary>
            Makes sure the view is a window is is wrapped by one.
            </summary>
            <param name="model">The view model.</param>
            <param name="view">The view.</param>
            <param name="isDialog">Whethor or not the window is being shown as a dialog.</param>
            <returns>The window.</returns>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.InferOwnerOf(System.Windows.Window)">
            <summary>
            Infers the owner of the window.
            </summary>
            <param name="window">The window to whose owner needs to be determined.</param>
            <returns>The owner.</returns>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.CreatePage(System.Object,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates the page.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="settings">The optional popup settings.</param>
            <returns>The page.</returns>
        </member>
        <member name="M:Caliburn.Micro.WindowManager.EnsurePage(System.Object,System.Object)">
            <summary>
            Ensures the view is a page or provides one.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <returns>The page.</returns>
        </member>
        <member name="T:Caliburn.Micro.XamlPlatformProvider">
            <summary>
            A <see cref="T:Caliburn.Micro.IPlatformProvider"/> implementation for the XAML platfrom.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Micro.XamlPlatformProvider"/> class.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.XamlPlatformProvider.InDesignMode">
            <summary>
            Indicates whether or not the framework is in design-time mode.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.BeginOnUIThread(System.Action)">
            <summary>
            Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.OnUIThreadAsync(System.Action)">
            <summary>
            Executes the action on the UI thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.OnUIThread(System.Action)">
            <summary>
            Executes the action on the UI thread.
            </summary>
            <param name="action">The action to execute.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.GetFirstNonGeneratedView(System.Object)">
            <summary>
            Used to retrieve the root, non-framework-created view.
            </summary>
            <param name="view">The view to search.</param>
            <returns>
            The root element that was not created by the framework.
            </returns>
            <remarks>
            In certain instances the services create UI elements.
            For example, if you ask the window manager to show a UserControl as a dialog, it creates a window to host the UserControl in.
            The WindowManager marks that element as a framework-created element so that it can determine what it created vs. what was intended by the developer.
            Calling GetFirstNonGeneratedView allows the framework to discover what the original element was.
            </remarks>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.ExecuteOnFirstLoad(System.Object,System.Action{System.Object})">
            <summary>
            Executes the handler the fist time the view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.ExecuteOnLayoutUpdated(System.Object,System.Action{System.Object})">
            <summary>
            Executes the handler the next time the view's LayoutUpdated event fires.
            </summary>
            <param name="view">The view.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Micro.XamlPlatformProvider.GetViewCloseAction(System.Object,System.Collections.Generic.ICollection{System.Object},System.Nullable{System.Boolean})">
            <summary>
            Get the close action for the specified view model.
            </summary>
            <param name="viewModel">The view model to close.</param>
            <param name="views">The associated views.</param>
            <param name="dialogResult">The dialog result.</param>
            <returns>
            An <see cref="T:Caliburn.Micro.Action" /> to close the view model.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
    </members>
</doc>
